{"version":3,"sources":["menus.css","../../../../../static/rb/css/ui/menus.less","../../../../../static/rb/css/ui/private/var/folders/34/6wkbp94x5g79sbk8kfrscpzw0000gn/T/beanbag-tools.xe30leua/reviewboard/htdocs/static/rb/css/ui/menus.less"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmFG;AC6BH;EAGE,oBAAA;EACA,0BAAA;EACA,4CAAA;EACA,eAAA;EACA,iBAAA;EACA,WAAA;EACA,UAAA;EACA,WAAA;EACA,mBAAA;EACA,gCAAA;EACA,mBAAA;EACA,aAAA;ED7BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCG;CACJ;ACLC;EACE,WAAA;EACA,oBAAA;CDOH;ACJC;EACE,iBAAA;CDMH;ACiCC;EACE,gBAAA;EACA,eAAA;EACA,mBAAA;EACA,UAAA;CD/BH;ACiCG;EACE,oBAAA;EACA,WAAA;CD/BL;ACkCG;EDhCF;;;SAGO;ECkCH,mBAAA;CDhCL;ACkCK;EACE,oBAAA;EACA,WAAA;CDhCP;AACD;;;;;;GAMG;AACH;;;;;;GAMG;AC4CH;ED1CE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCG;EACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCG;EACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCG;ECzKH,oBAAA;EACA,0BAAA;EACA,4CAAA;EACA,eAAA;EACA,iBAAA;EACA,WAAA;EACA,UAAA;EACA,WAAA;EACA,mBAAA;EACA,gCAAA;EACA,mBAAA;EACA,aAAA;ED2KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCG;CACJ;AE7MC;EACE,WAAA;EACA,oBAAA;CF+MH;AE5MC;EACE,iBAAA;CF8MH;AEvKC;EACE,gBAAA;EACA,eAAA;EACA,mBAAA;EACA,UAAA;CFyKH;AEvKG;EACE,oBAAA;EACA,WAAA;CFyKL;AEtKG;EFwKF;;;SAGO;EEtKH,mBAAA;CFwKL;AEtKK;EACE,oBAAA;EACA,WAAA;CFwKP;ACzOC;EACE,WAAA;EACA,oBAAA;CD2OH;ACxOC;EACE,iBAAA;CD0OH;ACnMC;EACE,gBAAA;EACA,eAAA;EACA,mBAAA;EACA,UAAA;CDqMH;ACnMG;EACE,oBAAA;EACA,WAAA;CDqML;AClMG;EDoMF;;;SAGO;EClMH,mBAAA;CDoML;AClMK;EACE,oBAAA;EACA,WAAA;CDoMP;AErQC;EACE,WAAA;EACA,oBAAA;CFuQH;AEpQC;EACE,iBAAA;CFsQH;AE/NC;EACE,gBAAA;EACA,eAAA;EACA,mBAAA;EACA,UAAA;CFiOH;AE/NG;EACE,oBAAA;EACA,WAAA;CFiOL;AE9NG;EFgOF;;;SAGO;EE9NH,mBAAA;CFgOL;AE9NK;EACE,oBAAA;EACA,WAAA;CFgOP;ACjSC;EACE,WAAA;EACA,oBAAA;CDmSH;AChSC;EACE,iBAAA;CDkSH;AC3PC;EACE,gBAAA;EACA,eAAA;EACA,mBAAA;EACA,UAAA;CD6PH;AC3PG;EACE,oBAAA;EACA,WAAA;CD6PL;AC1PG;ED4PF;;;SAGO;EC1PH,mBAAA;CD4PL;AC1PK;EACE,oBAAA;EACA,WAAA;CD4PP;AC7NC;EA/FE,WAAA;EACA,oBAAA;CD+TH","file":"menus.css","sourcesContent":["/**\n * A drop-down menu.\n *\n * This is shown as a result of clicking another piece of UI (such as a\n * ``.rb-c-menu-button``).\n *\n * Drop-down menus may contain lists of items that perform actions or\n * manipulate state. This may be represented as a ``<ul>`` tag, with each\n * item as a ``<li>``. It may also be represented as a ``<div>`` tag, with\n * each item as a ``<a>``, ``<button>``, or ``<div>``.\n *\n * They may also contain lists of buttons, when a ``.rb-c-button-group`` is\n * mixed in. In this case, ``.rb-c-button` should also be mixed in to each\n * ``.rb-c-menu__item``.\n *\n * :js:class:`RB.MenuView` provides a standard implementation of this\n * component.\n *\n * Accessibility Notes:\n *     Implementations of this component should implement keyboard navigation\n *     behavior for accessing items in the menu.\n *\n *     The following keys should be supported:\n *\n *     Enter:\n *         Trigger a click event on the selected item.\n *\n *     Escape, Tab:\n *         Close the menu and return focus to the controlling element that\n *         opened it.\n *\n *     Up:\n *         Move focus up one item. If focus was previously on the first item\n *         in the menu, focus should move to the last item.\n *\n *     Down:\n *         Move focus down one item. If focus was previously on the last item\n *         in the menu, focus should move to the first item.\n *\n *     Home, Page Up:\n *         Move focus to the first item.\n *\n *     End, Page Down:\n *         Move focus to the last item.\n *\n *     The menu and items should not be able to be focused via the Tab key.\n *     Instead, focus should be brought to the first menu item when opened\n *     via keyboard navigation.\n *\n *     Mouse movement over a menu item should also switch focus to that item.\n *     There is no ``:hover`` styling for menu items, so that all highlighting\n *     can standardize on ``:focus``.\n *\n * DOM Attributes:\n *     aria-labelledby (required):\n *         A reference to the element (or an element related to the element)\n *         that opened this menu. It must contain a descriptive label.\n *\n *     role (required):\n *         This must be set to \"menu\".\n *\n *     tabindex (required):\n *         This must be set to -1, allowing the menu to be focused\n *         programmatically but not through tabbing. Consumers must provide\n *         keyboard/mouse navigation.\n *\n * Structure:\n *     <ul class=\"rb-c-menu\" role=\"menu\" tabindex=\"-1\" aria-labelledby=\"...\">\n *      <li class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</li>\n *      ...\n *     </ul>\n *\n *     <div class=\"rb-c-menu\" role=\"menu\" tabindex=\"-1\" aria-labelledby=\"...\">\n *      <div class=\"rb-c-menu__item\" role=\"menuitem\">...</div>\n *      ...\n *     </div>\n *\n *     <div class=\"rb-c-menu rb-c-button-group -is-vertical\" role=\"menu\"\n *          aria-labelledby=\"...\">\n *      <button class=\"rb-c-menu__item rb-c-button\" role=\"menuitem\"\n *              type=\"button\" tabindex=\"-1\">...</div>\n *      ...\n *     </div>\n */\n.rb-c-menu {\n  background: #FFFFFF;\n  border: 1px #C0C0C0 solid;\n  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.05);\n  display: block;\n  list-style: none;\n  opacity: 0;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  transition: opacity 0.2s linear;\n  visibility: hidden;\n  z-index: 110;\n  /**\n   * A menu item.\n   *\n   * This may contain any content needed in the menu item, but will usually\n   * consist of text.\n   *\n   * The element type may be anything, and will depend on the parent\n   * ``.rb-c-menu``. It will most commonly be a ``<li>``, ``<a>``, ``<div>``,\n   * or ``<button>``.\n   *\n   * If displaying a button-based menu, this must have ``.rb-c-button`` mixed\n   * in.\n   *\n   * Consumers are responsible for marking a menu item as focused in response\n   * to keyboard navigation or mouse movements, in order to convey the active\n   * item.\n   *\n   * DOM Attributes:\n   *     role (required):\n   *         This must be set to \"menuitem\".\n   *\n   *     tabindex (required):\n   *         This must be set to -1, allowing the menu to be focused\n   *         programmatically but not through tabbing. Consumers should provide\n   *         keep\n   *\n   * Structure:\n   *     <li class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</li>\n   *\n   *     <a class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</a>\n   *\n   *     <button class=\"rb-c-menu__item rb-c-button\" role=\"menuitem\"\n   *             type=\"button\" tabindex=\"-1\">\n   *      ...\n   *     </button>\n   */\n}\n.rb-c-menu.-is-open {\n  opacity: 1;\n  visibility: visible;\n}\n.rb-c-menu.js-no-animation {\n  transition: none;\n}\n.rb-c-menu__item {\n  cursor: pointer;\n  display: block;\n  list-display: none;\n  margin: 0;\n}\n.rb-c-menu__item.rb-c-button:focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.rb-c-menu__item:not(.rb-c-button) {\n  /*\n       * We want to apply padding to standard list items, but button list\n       * items should retain button padding.\n       */\n  padding: 0.8em 1em;\n}\n.rb-c-menu__item:not(.rb-c-button):focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n/**\n * Converts an element into a pop-up menu.\n *\n * Deprecated:\n *     4.0:\n *     Elements should mix in ``.rb-c-menu`` instead.\n */\n/**\n * Indicates that an element will display a menu on hover.\n *\n * Deprecated:\n *     4.0:\n *     Consumers should use a more specific component class instead.\n */\n.has-menu .menu {\n  /**\n   * A menu item.\n   *\n   * This may contain any content needed in the menu item, but will usually\n   * consist of text.\n   *\n   * The element type may be anything, and will depend on the parent\n   * ``.rb-c-menu``. It will most commonly be a ``<li>``, ``<a>``, ``<div>``,\n   * or ``<button>``.\n   *\n   * If displaying a button-based menu, this must have ``.rb-c-button`` mixed\n   * in.\n   *\n   * Consumers are responsible for marking a menu item as focused in response\n   * to keyboard navigation or mouse movements, in order to convey the active\n   * item.\n   *\n   * DOM Attributes:\n   *     role (required):\n   *         This must be set to \"menuitem\".\n   *\n   *     tabindex (required):\n   *         This must be set to -1, allowing the menu to be focused\n   *         programmatically but not through tabbing. Consumers should provide\n   *         keep\n   *\n   * Structure:\n   *     <li class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</li>\n   *\n   *     <a class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</a>\n   *\n   *     <button class=\"rb-c-menu__item rb-c-button\" role=\"menuitem\"\n   *             type=\"button\" tabindex=\"-1\">\n   *      ...\n   *     </button>\n   */\n  /**\n   * A menu item.\n   *\n   * This may contain any content needed in the menu item, but will usually\n   * consist of text.\n   *\n   * The element type may be anything, and will depend on the parent\n   * ``.rb-c-menu``. It will most commonly be a ``<li>``, ``<a>``, ``<div>``,\n   * or ``<button>``.\n   *\n   * If displaying a button-based menu, this must have ``.rb-c-button`` mixed\n   * in.\n   *\n   * Consumers are responsible for marking a menu item as focused in response\n   * to keyboard navigation or mouse movements, in order to convey the active\n   * item.\n   *\n   * DOM Attributes:\n   *     role (required):\n   *         This must be set to \"menuitem\".\n   *\n   *     tabindex (required):\n   *         This must be set to -1, allowing the menu to be focused\n   *         programmatically but not through tabbing. Consumers should provide\n   *         keep\n   *\n   * Structure:\n   *     <li class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</li>\n   *\n   *     <a class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</a>\n   *\n   *     <button class=\"rb-c-menu__item rb-c-button\" role=\"menuitem\"\n   *             type=\"button\" tabindex=\"-1\">\n   *      ...\n   *     </button>\n   */\n  /**\n   * A menu item.\n   *\n   * This may contain any content needed in the menu item, but will usually\n   * consist of text.\n   *\n   * The element type may be anything, and will depend on the parent\n   * ``.rb-c-menu``. It will most commonly be a ``<li>``, ``<a>``, ``<div>``,\n   * or ``<button>``.\n   *\n   * If displaying a button-based menu, this must have ``.rb-c-button`` mixed\n   * in.\n   *\n   * Consumers are responsible for marking a menu item as focused in response\n   * to keyboard navigation or mouse movements, in order to convey the active\n   * item.\n   *\n   * DOM Attributes:\n   *     role (required):\n   *         This must be set to \"menuitem\".\n   *\n   *     tabindex (required):\n   *         This must be set to -1, allowing the menu to be focused\n   *         programmatically but not through tabbing. Consumers should provide\n   *         keep\n   *\n   * Structure:\n   *     <li class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</li>\n   *\n   *     <a class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</a>\n   *\n   *     <button class=\"rb-c-menu__item rb-c-button\" role=\"menuitem\"\n   *             type=\"button\" tabindex=\"-1\">\n   *      ...\n   *     </button>\n   */\n  background: #FFFFFF;\n  border: 1px #C0C0C0 solid;\n  box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.05);\n  display: block;\n  list-style: none;\n  opacity: 0;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  transition: opacity 0.2s linear;\n  visibility: hidden;\n  z-index: 110;\n  /**\n   * A menu item.\n   *\n   * This may contain any content needed in the menu item, but will usually\n   * consist of text.\n   *\n   * The element type may be anything, and will depend on the parent\n   * ``.rb-c-menu``. It will most commonly be a ``<li>``, ``<a>``, ``<div>``,\n   * or ``<button>``.\n   *\n   * If displaying a button-based menu, this must have ``.rb-c-button`` mixed\n   * in.\n   *\n   * Consumers are responsible for marking a menu item as focused in response\n   * to keyboard navigation or mouse movements, in order to convey the active\n   * item.\n   *\n   * DOM Attributes:\n   *     role (required):\n   *         This must be set to \"menuitem\".\n   *\n   *     tabindex (required):\n   *         This must be set to -1, allowing the menu to be focused\n   *         programmatically but not through tabbing. Consumers should provide\n   *         keep\n   *\n   * Structure:\n   *     <li class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</li>\n   *\n   *     <a class=\"rb-c-menu__item\" role=\"menuitem\" tabindex=\"-1\">...</a>\n   *\n   *     <button class=\"rb-c-menu__item rb-c-button\" role=\"menuitem\"\n   *             type=\"button\" tabindex=\"-1\">\n   *      ...\n   *     </button>\n   */\n}\n.has-menu .menu.-is-open {\n  opacity: 1;\n  visibility: visible;\n}\n.has-menu .menu.js-no-animation {\n  transition: none;\n}\n.has-menu .menu__item {\n  cursor: pointer;\n  display: block;\n  list-display: none;\n  margin: 0;\n}\n.has-menu .menu__item.rb-c-button:focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu .menu__item:not(.rb-c-button) {\n  /*\n       * We want to apply padding to standard list items, but button list\n       * items should retain button padding.\n       */\n  padding: 0.8em 1em;\n}\n.has-menu .menu__item:not(.rb-c-button):focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu .menu.-is-open {\n  opacity: 1;\n  visibility: visible;\n}\n.has-menu .menu.js-no-animation {\n  transition: none;\n}\n.has-menu .menu__item {\n  cursor: pointer;\n  display: block;\n  list-display: none;\n  margin: 0;\n}\n.has-menu .menu__item.rb-c-button:focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu .menu__item:not(.rb-c-button) {\n  /*\n       * We want to apply padding to standard list items, but button list\n       * items should retain button padding.\n       */\n  padding: 0.8em 1em;\n}\n.has-menu .menu__item:not(.rb-c-button):focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu .menu.-is-open {\n  opacity: 1;\n  visibility: visible;\n}\n.has-menu .menu.js-no-animation {\n  transition: none;\n}\n.has-menu .menu__item {\n  cursor: pointer;\n  display: block;\n  list-display: none;\n  margin: 0;\n}\n.has-menu .menu__item.rb-c-button:focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu .menu__item:not(.rb-c-button) {\n  /*\n       * We want to apply padding to standard list items, but button list\n       * items should retain button padding.\n       */\n  padding: 0.8em 1em;\n}\n.has-menu .menu__item:not(.rb-c-button):focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu .menu.-is-open {\n  opacity: 1;\n  visibility: visible;\n}\n.has-menu .menu.js-no-animation {\n  transition: none;\n}\n.has-menu .menu__item {\n  cursor: pointer;\n  display: block;\n  list-display: none;\n  margin: 0;\n}\n.has-menu .menu__item.rb-c-button:focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu .menu__item:not(.rb-c-button) {\n  /*\n       * We want to apply padding to standard list items, but button list\n       * items should retain button padding.\n       */\n  padding: 0.8em 1em;\n}\n.has-menu .menu__item:not(.rb-c-button):focus {\n  background: #DAEBFF;\n  outline: 0;\n}\n.has-menu:hover > .menu {\n  opacity: 1;\n  visibility: visible;\n}\n/*# sourceMappingURL=menus.css.map */",null,null]}
{"version":3,"file":"reviewRequestPageModelTests.js","names":["suite","page","beforeEach","RB","ReviewRequestPage","updatesURL","checkForUpdates","reviewRequestData","editorData","fileAttachments","mutableByUser","showSendEmail","parse","describe","it","entry","Entry","addEntry","expect","get","toBe","entries","at","attrs","summary","reviewRequest","toBeTruthy","spyOn","id","watchEntryUpdates","_watchedUpdatesPeriodMS","_watchedEntries","toEqual","periodMS","_scheduleCheckUpdates","toHaveBeenCalled","entry1","entry2","stopWatchingEntryUpdates","_","isEmpty","_watchedUpdatesTimeout","_watchedUpdatesLastScheduleTime","scheduledCallback","and","callThrough","window","callFake","cb","ms","Backbone","typeID","entry3","not","_loadUpdates","calls","count","mostRecent","args","sync","callOptions","url","noActivityIndicator","dataType","TestEntry","extend","rsp","myAttr","prototype","call","addedTimestamp","Date","UTC","updatedTimestamp","done","$","options","metadata1","Blob","metadata2","html1","html2","blob","DataUtils","buildBlob","type","values","readBlobAsArrayBuffer","success","onDone","entryType","entryID","modelData","beforeApplyUpdate","toHaveBeenCalledWith","afterApplyUpdate","trigger","set","etag","metadata","html","size","foo","length"],"sources":["../../../../../../../static/rb/js/reviewRequestPage/models/tests/reviewRequestPageModelTests.es6.js"],"sourcesContent":["suite('rb/reviewRequestPage/models/ReviewRequestPage', function() {\n    let page;\n\n    beforeEach(function() {\n        page = new RB.ReviewRequestPage.ReviewRequestPage({\n            updatesURL: '/r/123/_updates/',\n            checkForUpdates: false,\n            reviewRequestData: {},\n            editorData: {\n                fileAttachments: [],\n                mutableByUser: true,\n                showSendEmail: false,\n            },\n        }, {\n            parse: true,\n        });\n    });\n\n    describe('Methods', function() {\n        it('addEntry', function() {\n            const entry = new RB.ReviewRequestPage.Entry();\n\n            page.addEntry(entry);\n\n            expect(entry.get('page')).toBe(page);\n            expect(page.entries.at(0)).toBe(entry);\n        });\n\n        describe('parse', function() {\n            it('Parent called', function() {\n                const attrs = page.parse({\n                    reviewRequestData: {\n                        summary: 'Test summary',\n                    },\n                });\n\n                expect(attrs.reviewRequest).toBeTruthy();\n                expect(attrs.reviewRequest.get('summary')).toBe('Test summary');\n            });\n\n            it('updatesURL', function() {\n                const attrs = page.parse({\n                    updatesURL: 'https://example.com/',\n                });\n\n                expect(attrs.updatesURL).toBe('https://example.com/');\n            });\n        });\n\n        describe('watchEntryUpdates', function() {\n            let entry;\n\n            beforeEach(function() {\n                spyOn(page, '_scheduleCheckUpdates');\n\n                entry = new RB.ReviewRequestPage.Entry({\n                    id: 'my-entry',\n                });\n            });\n\n            it('First call', function() {\n                page.watchEntryUpdates(entry, 1000);\n\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n                expect(page._watchedEntries[entry.id]).toEqual({\n                    entry: entry,\n                    periodMS: 1000,\n                });\n                expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            });\n\n            it('Shorter watch periods take precedent', function() {\n                page._watchedUpdatesPeriodMS = 5000;\n                page.watchEntryUpdates(entry, 1000);\n\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n                expect(page._watchedEntries[entry.id]).toEqual({\n                    entry: entry,\n                    periodMS: 1000,\n                });\n                expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            });\n\n            it('Subsequent call with longer watch period', function() {\n                page._watchedUpdatesPeriodMS = 1000;\n                page.watchEntryUpdates(entry, 5000);\n\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n                expect(page._watchedEntries[entry.id]).toEqual({\n                    entry: entry,\n                    periodMS: 5000,\n                });\n                expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            });\n        });\n\n        describe('stopWatchingEntryUpdates', function() {\n            beforeEach(function() {\n                spyOn(page, '_scheduleCheckUpdates');\n            });\n\n            it('Switches to next-shortest update period', function() {\n                const entry1 = new RB.ReviewRequestPage.Entry({\n                    id: '1',\n                });\n\n                const entry2 = new RB.ReviewRequestPage.Entry({\n                    id: '2',\n                });\n\n                page.watchEntryUpdates(entry1, 2000);\n                page.watchEntryUpdates(entry2, 1000);\n                expect(page._watchedUpdatesPeriodMS).toBe(1000);\n\n                page.stopWatchingEntryUpdates(entry2);\n                expect(page._watchedUpdatesPeriodMS).toBe(2000);\n            });\n\n            it('Last entry being watched', function() {\n                const entry = new RB.ReviewRequestPage.Entry({\n                    id: '1',\n                });\n\n                page.watchEntryUpdates(entry, 1000);\n                page.stopWatchingEntryUpdates(entry);\n\n                expect(_.isEmpty(page._watchedEntries)).toBe(true);\n                expect(page._watchedUpdatesTimeout).toBe(null);\n                expect(page._watchedUpdatesPeriodMS).toBe(null);\n                expect(page._watchedUpdatesLastScheduleTime).toBe(null);\n            });\n        });\n    });\n\n    describe('Dynamic updating', function() {\n        it('Scheduled check for update', function() {\n            let scheduledCallback = null;\n\n            spyOn(page, '_scheduleCheckUpdates').and.callThrough();\n            spyOn(window, 'setTimeout').and.callFake((cb, ms) => {\n                scheduledCallback = cb;\n\n                return 'dummy value';\n            });\n            spyOn(page, '_loadUpdates').and.callThrough();\n            spyOn(Backbone, 'sync');\n\n            const entry1 = new RB.ReviewRequestPage.Entry({\n                typeID: 'my-entry',\n                id: '100',\n            });\n\n            const entry2 = new RB.ReviewRequestPage.Entry({\n                typeID: 'my-entry',\n                id: '200',\n            });\n\n            const entry3 = new RB.ReviewRequestPage.Entry({\n                typeID: 'another-entry',\n                id: 'foo',\n            });\n\n            page.watchEntryUpdates(entry1, 2000);\n            page.watchEntryUpdates(entry2, 1000);\n            page.watchEntryUpdates(entry3, 2000);\n\n            expect(scheduledCallback).not.toBe(null);\n\n            expect(page._scheduleCheckUpdates).toHaveBeenCalled();\n            expect(page._watchedUpdatesLastScheduleTime).not.toBe(null);\n            expect(page._watchedUpdatesTimeout).not.toBe(null);\n\n            scheduledCallback();\n\n            expect(page._watchedUpdatesLastScheduleTime).not.toBe(null);\n            expect(page._watchedUpdatesTimeout).toBe(null);\n            expect(page._loadUpdates.calls.count()).toBe(1);\n            expect(page._loadUpdates.calls.mostRecent().args[0].entries)\n                .toEqual([entry1, entry2, entry3]);\n\n            expect(Backbone.sync.calls.count()).toBe(1);\n\n            const callOptions = Backbone.sync.calls.mostRecent().args[2];\n            expect(callOptions.url)\n                .toBe('/r/123/_updates/?entries=my-entry:100,200' +\n                      ';another-entry:foo');\n            expect(callOptions.noActivityIndicator).toBe(true);\n            expect(callOptions.dataType).toBe('arraybuffer');\n        });\n\n        describe('Response parsing', function() {\n            const TestEntry = RB.ReviewRequestPage.Entry.extend({\n                parse(rsp) {\n                    return _.extend({\n                        myAttr: rsp.myAttr,\n                    }, RB.ReviewRequestPage.Entry.prototype.parse.call(this,\n                                                                       rsp));\n                },\n            });\n\n            let entry1;\n            let entry2;\n\n            beforeEach(function() {\n                spyOn(page, 'trigger').and.callThrough();\n\n                entry1 = new TestEntry({\n                    typeID: 'my-entry',\n                    id: '1',\n                    addedTimestamp: new Date(Date.UTC(2017, 7, 1, 0, 0, 0)),\n                    updatedTimestamp: new Date(Date.UTC(2017, 7, 1, 12, 0, 0)),\n                });\n\n                entry2 = new TestEntry({\n                    typeID: 'my-entry',\n                    id: '2',\n                    addedTimestamp: new Date(Date.UTC(2017, 7, 1, 0, 0, 0)),\n                    updatedTimestamp: new Date(Date.UTC(2017, 7, 1, 12, 0, 0)),\n                });\n\n                page.addEntry(entry1);\n                page.addEntry(entry2);\n            });\n\n            it('Updates to outdated entries using timetamps', function(done) {\n                spyOn(entry1, 'beforeApplyUpdate');\n                spyOn(entry1, 'afterApplyUpdate');\n                spyOn(entry2, 'beforeApplyUpdate');\n                spyOn(entry2, 'afterApplyUpdate');\n\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata1 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"1\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-04T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value1\"}}',\n                    ]);\n                    const metadata2 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"2\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-03T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value2\"}}',\n                    ]);\n\n                    const html1 = new Blob(['<p>My HTML!</p>']);\n                    const html2 = new Blob(['<p>Oh hi!</p>']);\n\n                    const blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [177],\n                        }],\n                        metadata1,\n                        [{\n                            type: 'uint32',\n                            values: [15],\n                        }],\n                        html1,\n                        [{\n                            type: 'uint32',\n                            values: [177],\n                        }],\n                        metadata2,\n                        [{\n                            type: 'uint32',\n                            values: [13],\n                        }],\n                        html2,\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        /* Check the first entry's updates and events. */\n                        const metadata1 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '1',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-04T14:30:20',\n                            modelData: {\n                                myAttr: 'value1',\n                            },\n                        };\n                        const html1 = '<p>My HTML!</p>';\n\n                        expect(entry1.get('myAttr')).toBe('value1');\n                        expect(entry1.get('etag')).toBe(null);\n                        expect(entry1.get('updatedTimestamp')).toEqual(\n                            new Date(Date.UTC(2017, 8, 4, 14, 30, 20)));\n\n                        expect(entry1.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(entry1.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata1, html1);\n\n                        /* Check the second entry's updates and events. */\n                        const metadata2 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '2',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-03T14:30:20',\n                            modelData: {\n                                myAttr: 'value2',\n                            },\n                        };\n                        const html2 = '<p>Oh hi!</p>';\n\n                        expect(entry2.get('myAttr')).toBe('value2');\n                        expect(entry2.get('etag')).toBe(null);\n                        expect(entry2.get('updatedTimestamp')).toEqual(\n                            new Date(Date.UTC(2017, 8, 3, 14, 30, 20)));\n\n                        expect(entry2.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(entry2.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata2, html2);\n\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n\n            it('Updates to outdated entries using etags', function(done) {\n                entry1.set('etag', 'old-etag');\n                entry2.set('etag', 'old-etag');\n\n                spyOn(entry1, 'beforeApplyUpdate');\n                spyOn(entry1, 'afterApplyUpdate');\n                spyOn(entry2, 'beforeApplyUpdate');\n                spyOn(entry2, 'afterApplyUpdate');\n\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata1 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"1\", ',\n                        '\"etag\": \"new-etag\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-07-01T12:00:00\", ',\n                        '\"modelData\": {\"myAttr\": \"value1\"}}',\n                    ]);\n                    const metadata2 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"2\", ',\n                        '\"etag\": \"new-etag\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-07-01T12:00:00\", ',\n                        '\"modelData\": {\"myAttr\": \"value2\"}}',\n                    ]);\n\n                    const html1 = new Blob(['<p>My HTML!</p>']);\n                    const html2 = new Blob(['<p>Oh hi!</p>']);\n\n                    const blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [197],\n                        }],\n                        metadata1,\n                        [{\n                            type: 'uint32',\n                            values: [15],\n                        }],\n                        html1,\n                        [{\n                            type: 'uint32',\n                            values: [197],\n                        }],\n                        metadata2,\n                        [{\n                            type: 'uint32',\n                            values: [13],\n                        }],\n                        html2,\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        /* Check the first entry's updates and events. */\n                        const metadata1 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '1',\n                            etag: 'new-etag',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-07-01T12:00:00',\n                            modelData: {\n                                myAttr: 'value1',\n                            },\n                        };\n                        const html1 = '<p>My HTML!</p>';\n\n                        expect(entry1.get('myAttr')).toBe('value1');\n                        expect(entry1.get('etag')).toBe('new-etag');\n                        expect(entry1.get('updatedTimestamp')).toEqual(\n                            new Date(Date.UTC(2017, 6, 1, 12, 0, 0)));\n\n                        expect(entry1.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(entry1.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata1, html1);\n\n                        /* Check the second entry's updates and events. */\n                        const metadata2 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '2',\n                            etag: 'new-etag',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-07-01T12:00:00',\n                            modelData: {\n                                myAttr: 'value2',\n                            },\n                        };\n                        const html2 = '<p>Oh hi!</p>';\n\n                        expect(entry2.get('myAttr')).toBe('value2');\n                        expect(entry2.get('etag')).toBe('new-etag');\n                        expect(entry2.get('updatedTimestamp')).toEqual(\n                            new Date(Date.UTC(2017, 6, 1, 12, 0, 0)));\n\n                        expect(entry2.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(entry2.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata2, html2);\n\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n\n            it('Updates to up-to-date entries', function(done) {\n                entry1.set({\n                    etag: 'old-etag',\n                    myAttr: 'existing-value',\n                });\n\n                spyOn(entry1, 'beforeApplyUpdate');\n                spyOn(entry1, 'afterApplyUpdate');\n\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"1\", ',\n                        '\"etag\": \"old-etag\", ',\n                        '\"addedTimestamp\": \"2016-09-04T14:30:20\", ',\n                        '\"updatedTimestamp\": \"2016-12-10T12:24:14\", ',\n                        '\"modelData\": {\"myAttr\": \"value1\"}}',\n                    ]);\n                    const html = new Blob(['<p>My HTML!</p>']);\n\n                    let blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [metadata.size],\n                        }],\n                        metadata,\n                        [{\n                            type: 'uint32',\n                            values: [html.size],\n                        }],\n                        html,\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        /* Check the first entry's updates and events. */\n                        const metadata1 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '1',\n                            etag: 'old-etag',\n                            addedTimestamp: '2016-09-04T14:30:20',\n                            updatedTimestamp: '2016-09-04T14:30:20',\n                            modelData: {\n                                myAttr: 'value1',\n                            },\n                        };\n                        const html1 = '<p>My HTML!</p>';\n\n                        expect(entry1.get('myAttr')).toBe('existing-value');\n                        expect(entry1.get('etag')).toBe('old-etag');\n                        expect(entry1.get('updatedTimestamp')).toEqual(\n                            new Date(Date.UTC(2017, 7, 1, 12, 0, 0)));\n\n                        expect(entry1.beforeApplyUpdate)\n                            .not.toHaveBeenCalled();\n                        expect(entry1.afterApplyUpdate).not.toHaveBeenCalled();\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'applyingUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'appliedUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).not.toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata1, html1);\n\n                        expect(page.trigger)\n                            .toHaveBeenCalledWith('updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n\n            it('Updates to non-entries', function(done) {\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata = new Blob([\n                        '{\"type\": \"something\", \"foo\": \"bar\"}',\n                    ]);\n                    const html = new Blob(['<div>Something</div>']);\n\n                    let blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [metadata.size],\n                        }],\n                        metadata,\n                        [{\n                            type: 'uint32',\n                            values: [html.size],\n                        }],\n                        html,\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        const metadata = {\n                            type: 'something',\n                            foo: 'bar',\n                        };\n                        const html = '<div>Something</div>';\n\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:something', metadata, html);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:something', metadata, html);\n\n                        expect(page.trigger)\n                            .toHaveBeenCalledWith('updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n\n            it('Updates containing Unicode in HTML', function(done) {\n                spyOn(entry1, 'beforeApplyUpdate');\n                spyOn(entry1, 'afterApplyUpdate');\n                spyOn(entry2, 'beforeApplyUpdate');\n                spyOn(entry2, 'afterApplyUpdate');\n\n                spyOn($, 'ajax').and.callFake(function(options) {\n                    expect(options.dataType).toBe('arraybuffer');\n                    expect(options.url).toBe('/r/123/_updates/');\n\n                    const metadata1 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"1\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-04T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value1\"}}',\n                    ]);\n                    const metadata2 = new Blob([\n                        '{\"type\": \"entry\", ',\n                        '\"entryType\": \"my-entry\", ',\n                        '\"entryID\": \"2\", ',\n                        '\"addedTimestamp\": \"2017-07-01T00:00:00\", ',\n                        '\"updatedTimestamp\": \"2017-09-03T14:30:20\", ',\n                        '\"modelData\": {\"myAttr\": \"value2\"}}',\n                    ]);\n\n                    /* UTF-8 bytes for \"<span>áéíóú 🔥</span>\" */\n                    const html1 = [\n                        60, 115, 112, 97, 110, 62, 195, 161, 195, 169,\n                        195, 173, 195, 179, 195, 186, 32, 240, 159, 148,\n                        165, 60, 47, 115, 112, 97, 110, 62,\n                    ];\n\n                    /* UTF-8 bytes for \"<span>ÄËÏÖÜŸ 😱</span>\" */\n                    const html2 = [\n                        60, 115, 112, 97, 110, 62, 195, 132, 195, 139,\n                        195, 143, 195, 150, 195, 156, 197, 184, 32, 240,\n                        159, 152, 177, 60, 47, 115, 112, 97, 110, 62,\n                    ];\n\n                    expect(html1.length).toBe(28);\n                    expect(html2.length).toBe(30);\n\n                    let blob = RB.DataUtils.buildBlob([\n                        [{\n                            type: 'uint32',\n                            values: [metadata1.size],\n                        }],\n                        metadata1,\n                        [\n                            {\n                                type: 'uint32',\n                                values: [html1.length],\n                            },\n                            {\n                                type: 'uint8',\n                                values: html1,\n                            },\n                            {\n                                type: 'uint32',\n                                values: [metadata2.size],\n                            },\n                        ],\n                        metadata2,\n                        [\n                            {\n                                type: 'uint32',\n                                values: [html2.length],\n                            },\n                            {\n                                type: 'uint8',\n                                values: html2,\n                            },\n                        ],\n                    ]);\n\n                    RB.DataUtils.readBlobAsArrayBuffer(blob, options.success);\n                });\n\n                page._loadUpdates({\n                    onDone: () => {\n                        /* Check the first entry's updates and events. */\n                        const metadata1 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '1',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-04T14:30:20',\n                            modelData: {\n                                myAttr: 'value1',\n                            },\n                        };\n                        const html1 = '<span>áéíóú 🔥</span>';\n\n                        expect(entry1.get('myAttr')).toBe('value1');\n                        expect(entry1.get('etag')).toBe(null);\n                        expect(entry1.get('updatedTimestamp')).toEqual(\n                            new Date(Date.UTC(2017, 8, 4, 14, 30, 20)));\n\n                        expect(entry1.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(entry1.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:1', metadata1, html1);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata1, html1);\n\n                        /* Check the second entry's updates and events. */\n                        const metadata2 = {\n                            type: 'entry',\n                            entryType: 'my-entry',\n                            entryID: '2',\n                            addedTimestamp: '2017-07-01T00:00:00',\n                            updatedTimestamp: '2017-09-03T14:30:20',\n                            modelData: {\n                                myAttr: 'value2',\n                            },\n                        };\n                        const html2 = '<span>ÄËÏÖÜŸ 😱</span>';\n\n                        expect(entry2.get('myAttr')).toBe('value2');\n                        expect(entry2.get('etag')).toBe(null);\n                        expect(entry2.get('updatedTimestamp')).toEqual(\n                            new Date(Date.UTC(2017, 8, 3, 14, 30, 20)));\n\n                        expect(entry2.beforeApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(entry2.afterApplyUpdate)\n                            .toHaveBeenCalledWith(metadata2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'applyingUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedModelUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry:2', metadata2, html2);\n                        expect(page.trigger).toHaveBeenCalledWith(\n                            'appliedUpdate:entry', metadata2, html2);\n\n                        expect(page.trigger)\n                            .toHaveBeenCalledWith('updatesProcessed');\n\n                        done();\n                    },\n                });\n            });\n        });\n    });\n});\n"],"mappings":"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"}
{"version":3,"file":"reviewRequestFieldViews.js","names":["Fields","BaseFieldView","Backbone","View","extend","editableProp","useExtraData","initialize","options","fieldID","jsonFieldName","_fieldName","undefined","$el","data","fieldName","replace","m","c","toUpperCase","_loadValue","_","result","model","getDraftField","defaults","_saveValue","value","setDraftField","needsSave","finishSave","TextFieldView","autocomplete","multiline","allowRichText","useEditIconOnly","richTextAttr","prototype","call","jsonTextTypeFieldName","_getInlineEditorClass","RB","RichTextInlineEditorView","InlineEditorView","render","hasClass","EditorClass","inlineEditorOptions","el","formClass","prop","editIconClass","enabled","get","showRequiredFlag","deferEventSetup","textEditorOptions","minHeight","richText","_loadRichTextValue","matchHeight","hasRawValue","rawValue","useRawTextValue","inlineEditorView","listenTo","incr","trigger","decr","saveOptions","allowMarkdown","textEditor","then","_formatField","catch","err","message","_buildAutoComplete","setupEvents","editable","enable","disable","_convertToLink","item","$","$link","attr","makeItemURL","text","makeItemText","cssClass","addClass","ac","reviewRequest","$field","rbautocomplete","formatItem","s","nameKey","descKey","escape","matchCase","multiple","parse","items","isFunction","map","parseItem","url","SITE_ROOT","resourceName","extraParams","cmp","width","error","xhr","JSON","responseText","msg","e","status","statusText","alert","on","resultsPane","length","appendTo","formatValue","isDirty","submit","textTypeFieldName","textType","console","assert","MultilineTextFieldView","extraData","draft","removeAttr","formatText","bugTrackerURL","isHTMLEncoded","newText","CommaSeparatedValuesTextFieldView","_urlizeList","list","$links","i","add","document","createTextNode","html","join","CheckboxFieldView","change","is","DropdownFieldView","val","DateFieldView","datepicker","changeMonth","changeYear","dateFormat","ISO_8601","showButtonPanel","onSelect","dateText","instance","lastVal","_dirty","moment","isValid","BranchFieldView","BugsFieldView","empty","append","find","bug_infobox","ChangeDescriptionFieldView","CommitListFieldView","_commitListView","DiffCommitListView","DiffCommitList","commits","isInterdiff","CloseDescriptionFieldView","close","type","closeType","description","postData","force_text_type","include_text_types","DependsOnFieldView","search","review_requests","display_name","id","toString","summary","term","a","b","review_request_infobox","DescriptionFieldView","OwnerFieldView","fullname","aUsername","username","bUsername","aFullname","bFullname","indexOf","localeCompare","href","substr","title","user_infobox","SummaryFieldView","TargetGroupsFieldView","displayname","name","TargetPeopleFieldView","TestingDoneFieldView","ReviewRequestFields"],"sources":["../../../../../static/rb/js/views/reviewRequestFieldViews.es6.js"],"sourcesContent":["(function() {\n\n\nconst Fields = {};\n\n\n/**\n * Base class for all field views.\n */\nFields.BaseFieldView = Backbone.View.extend({\n    /**\n     * The name of the property in the model for if this field is editable.\n     */\n    editableProp: 'editable',\n\n    /** Whether the contents of the field should be stored in extraData. */\n    useExtraData: true,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     fieldID (string):\n     *         The ID of the field.\n     */\n    initialize(options) {\n        this.fieldID = options.fieldID;\n        this.jsonFieldName = options.jsonFieldName ||\n                             this.jsonFieldName ||\n                             this.fieldID;\n        this._fieldName = undefined;\n        this.$el.data('field-id', this.fieldID);\n    },\n\n    /**\n     * The name of the attribute within the model.\n     *\n     * Returns:\n     *     string:\n     *     The namee of the attribute that this field will reflect.\n     */\n    fieldName() {\n        /*\n         * This implementation will convert names with underscores to camel\n         * case. This covers the typical naming between Python and JavaScript.\n         * If subclasses need something different, they can override this with\n         * either a new function or a regular attribute.\n         */\n        if (this._fieldName === undefined) {\n            this._fieldName = this.fieldID.replace(\n                /_(.)/g, (m, c) => c.toUpperCase());\n        }\n\n        return this._fieldName;\n    },\n\n    /**\n     * Load the stored value for the field.\n     *\n     * This will load from the draft if representing a built-in field\n     * (``useExtraData === false``) or from extra_data if a custom field\n     * (``useExtraData === true``).\n     *\n     * Args:\n     *     options (object):\n     *         Options for :js:func:`RB.ReviewRequestEditor.getDraftField`.\n     *\n     * Returns:\n     *     *:\n     *     The stored value for the field.\n     */\n    _loadValue(options) {\n        const fieldName = (this.useExtraData\n                           ? this.jsonFieldName\n                           : _.result(this, 'fieldName'));\n\n        return this.model.getDraftField(\n            fieldName,\n            _.defaults({\n                useExtraData: this.useExtraData,\n            }, options));\n    },\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    _saveValue(value, options) {\n        return this.model.setDraftField(\n            _.result(this, 'fieldName'),\n            value,\n            _.defaults({\n                jsonFieldName: this.jsonFieldName,\n                useExtraData: this.useExtraData,\n            }, options));\n    },\n\n    /**\n     * Return whether the field has an unsaved editor open.\n     *\n     * This should be overridden by subclasses, if necessary.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is unsaved.\n     */\n    needsSave() {\n        return false;\n    },\n\n    /**\n     * Finish the field's save operation.\n     *\n     * This should be overridden by subclasses, if necessary.\n     */\n    finishSave() {\n    },\n});\n\n\n/**\n * A field view for text-based fields.\n */\nFields.TextFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Autocomplete definitions.\n     *\n     * This should be overridden by subclasses.\n     */\n    autocomplete: null,\n\n    /** Whether the view is multi-line or single line. */\n    multiline: false,\n\n    /** Whether the field allows Markdown-formatted text. */\n    allowRichText: false,\n\n    /**\n     * Whether edits should be triggered only by clicking on the icon.\n     *\n     * If this is true, edits can only be triggered by clicking on the icon.\n     * If this is false, clicks on the field itself will also trigger an edit.\n     */\n    useEditIconOnly: false,\n\n    /**\n     * The model attribute for if this field is rich text.\n     *\n     * This is the name of the attribute which indicates whether the field\n     * contains Markdown-formatted text or plain text.\n     *\n     * Returns:\n     *     string:\n     *     The name of the model atribute indicating whether the field contains\n     *     rich text.\n     */\n    richTextAttr() {\n        return this.allowRichText\n               ? `${_.result(this, 'fieldName')}RichText`\n               : null;\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view. See the parent class for details.\n     */\n    initialize(options) {\n        Fields.BaseFieldView.prototype.initialize.call(this, options);\n\n        this.jsonTextTypeFieldName = (this.jsonFieldName === 'text'\n                                      ? 'text_type'\n                                      : `${this.jsonFieldName}_text_type`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return (this.allowRichText\n                ? RB.RichTextInlineEditorView\n                : RB.InlineEditorView);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.TextFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        if (!this.$el.hasClass('editable')) {\n            return this;\n        }\n\n        const fieldName = _.result(this, 'fieldName');\n        const EditorClass = this._getInlineEditorClass();\n\n        const inlineEditorOptions = {\n            el: this.$el,\n            formClass: `${this.$el.prop('id')}-editor`,\n            editIconClass: 'rb-icon rb-icon-edit',\n            enabled: this.model.get(this.editableProp),\n            multiline: this.multiline,\n            useEditIconOnly: this.useEditIconOnly,\n            showRequiredFlag: this.$el.hasClass('required'),\n            deferEventSetup: this.autocomplete !== null,\n        };\n\n        if (this.allowRichText) {\n            _.extend(inlineEditorOptions, {\n                textEditorOptions: {\n                    minHeight: 0,\n                    richText: this._loadRichTextValue(),\n                },\n                matchHeight: false,\n                hasRawValue: true,\n                rawValue: this._loadValue({\n                    useRawTextValue: true,\n                }) || '',\n            });\n        }\n\n        this.inlineEditorView = new EditorClass(inlineEditorOptions);\n        this.inlineEditorView.render();\n\n        this.listenTo(this.inlineEditorView, 'beginEdit',\n                      () => this.model.incr('editCount'));\n\n        this.listenTo(this.inlineEditorView, 'resize',\n                      () => this.trigger('resize'));\n\n        this.listenTo(this.inlineEditorView, 'cancel', () => {\n            this.trigger('resize');\n            this.model.decr('editCount');\n        });\n\n        this.listenTo(this.inlineEditorView, 'complete', value => {\n            this.trigger('resize');\n            this.model.decr('editCount');\n\n            const saveOptions = {\n                allowMarkdown: this.allowRichText,\n            };\n\n            if (this.allowRichText) {\n                saveOptions.richText =\n                    this.inlineEditorView.textEditor.richText;\n                saveOptions.jsonTextTypeFieldName = this.jsonTextTypeFieldName;\n            }\n\n            this._saveValue(value, saveOptions)\n                .then(() => {\n                    this._formatField();\n                    this.trigger('fieldSaved');\n                })\n                .catch(err => {\n                    this._formatField();\n                    this.trigger('fieldError', err.message);\n                });\n        });\n\n        if (this.autocomplete !== null) {\n            this._buildAutoComplete();\n            this.inlineEditorView.setupEvents();\n        }\n\n        this.listenTo(\n            this.model,\n            `change:${this.editableProp}`,\n            (model, editable) => {\n                if (editable) {\n                    this.inlineEditorView.enable();\n                } else {\n                    this.inlineEditorView.disable();\n                }\n            });\n\n        this.listenTo(this.model, `fieldChanged:${fieldName}`,\n                      this._formatField);\n\n        return this;\n    },\n\n    /**\n     * Convert an item to a hyperlink.\n     *\n     * Args:\n     *     item (object):\n     *         The item to link. The content is up to the caller.\n     *\n     *     options (object):\n     *         Options to control the linking behavior.\n     *\n     * Option Args:\n     *     cssClass (string, optional):\n     *         The optional CSS class to add to the link.\n     *\n     *     makeItemText (function, optional):\n     *         A function that takes the item and returns the text for the\n     *         link. If not specified, the item itself will be used as the\n     *         text.\n     *\n     *     makeItemURL (function, optional):\n     *         A function that takes the item and returns the URL for the link.\n     *         If not specified, the item itself will be used as the URL.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting link element wrapped in jQuery.\n     */\n    _convertToLink(item, options={}) {\n        if (!item) {\n            return $();\n        }\n\n        const $link = $('<a/>')\n            .attr('href', (options.makeItemURL\n                           ? options.makeItemURL(item)\n                           : item))\n            .text(options.makeItemText ? options.makeItemText(item) : item);\n\n        if (options.cssClass) {\n            $link.addClass(options.cssClass);\n        }\n\n        return $link;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const ac = this.autocomplete;\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this.inlineEditorView.$field\n            .rbautocomplete({\n                formatItem: data => {\n                    let s = data[ac.nameKey];\n\n                    if (ac.descKey && data[ac.descKey]) {\n                        s += ` <span>(${_.escape(data[ac.descKey])})</span>`;\n                    }\n\n                    return s;\n                },\n                matchCase: false,\n                multiple: true,\n                parse: data => {\n                    const items = _.isFunction(ac.fieldName)\n                                  ? ac.fieldName(data)\n                                  : data[ac.fieldName];\n\n                    return items.map(item => {\n                        if (ac.parseItem) {\n                            item = ac.parseItem(item);\n                        }\n\n                        return {\n                            data: item,\n                            value: item[ac.nameKey],\n                            result: item[ac.nameKey],\n                        };\n                    });\n                },\n                url: SITE_ROOT + reviewRequest.get('localSitePrefix') +\n                     'api/' + (ac.resourceName || ac.fieldName) + '/',\n                extraParams: ac.extraParams,\n                cmp: ac.cmp,\n                width: 350,\n                error: xhr => {\n                    let text;\n\n                    try {\n                        text = JSON.parse(xhr.responseText).err.msg;\n                    } catch (e) {\n                        text = `HTTP ${xhr.status} ${xhr.statusText}`;\n                    }\n\n                    alert(text);\n                },\n            })\n            .on('autocompleteshow', () => {\n                /*\n                 * Add the footer to the bottom of the results pane the\n                 * first time it's created.\n                 *\n                 * Note that we may have multiple .ui-autocomplete-results\n                 * elements, and we don't necessarily know which is tied to\n                 * this. So, we'll look for all instances that don't contain\n                 * a footer.\n                 */\n                const resultsPane = $('.ui-autocomplete-results:not(' +\n                                      ':has(.ui-autocomplete-footer))');\n\n                if (resultsPane.length > 0) {\n                    $('<div/>')\n                        .addClass('ui-autocomplete-footer')\n                        .text(gettext('Press Tab to auto-complete.'))\n                        .appendTo(resultsPane);\n                }\n            });\n    },\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const value = this._loadValue();\n\n        if (_.isFunction(this.formatValue)) {\n            this.formatValue(value);\n        } else {\n            this.$el.text(value);\n        }\n    },\n\n    /**\n     * Return whether the field has an unsaved editor open.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is unsaved.\n     */\n    needsSave() {\n        return this.inlineEditorView && this.inlineEditorView.isDirty();\n    },\n\n    /**\n     * Finish the field's save operation.\n     */\n    finishSave() {\n        this.inlineEditorView.submit();\n    },\n\n    /**\n     * Load the rich text value for the field.\n     *\n     * This will look up the rich text boolean attribute for built-in\n     * fields or the text type information in extra_data, returning\n     * whether the field is set to use rich text.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the field is set for rich text. This will be\n     *     ``undefined`` if an explicit value isn't stored.\n     */\n    _loadRichTextValue() {\n        if (this.useExtraData) {\n            const textTypeFieldName = this.jsonTextTypeFieldName;\n            const textType = this.model.getDraftField(\n                textTypeFieldName,\n                {\n                    useExtraData: true,\n                    useRawTextValue: true,\n                });\n\n            if (textType === undefined) {\n                return undefined;\n            }\n\n            console.assert(\n                textType === 'plain' || textType === 'markdown',\n                `Text type \"${textType}\" in field \"${textTypeFieldName}\" ` +\n                `not supported.`);\n\n            return textType === 'markdown';\n        } else {\n            return this.model.getDraftField(_.result(this, 'richTextAttr'));\n        }\n    },\n});\n\n\n/**\n * A field view for multiline text-based fields.\n */\nFields.MultilineTextFieldView = Fields.TextFieldView.extend({\n    multiline: true,\n    allowRichText: null,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        Fields.TextFieldView.prototype.initialize.call(this, options);\n\n        /*\n         * If this field is coming from an extension which doesn't specify any\n         * JS-side version, we need to pull some data out of the markup.\n         */\n        if (this.allowRichText === null) {\n            this.allowRichText = this.$el.data('allow-markdown');\n\n            const reviewRequest = this.model.get('reviewRequest');\n            const extraData = reviewRequest.draft.get('extraData');\n\n            const rawValue = this.$el.data('raw-value');\n            extraData[this.jsonFieldName] = (rawValue !== undefined\n                                             ? rawValue || ''\n                                             : this.$el.text());\n            this.$el.removeAttr('data-raw-value');\n\n            if (this.allowRichText) {\n                extraData[this.jsonTextTypeFieldName] =\n                    (this.$el.hasClass('rich-text') ? 'markdown' : 'plain');\n            }\n        }\n    },\n\n    /**\n     * Linkify a block of text.\n     *\n     * This turns URLs, /r/#/ paths, and bug numbers into clickable links. It's\n     * a wrapper around RB.formatText that handles passing in the bug tracker.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the text formatting.\n     *\n     * Option Args:\n     *     newText (string, optional):\n     *         The new text to format into the element. If not specified, the\n     *         existing contents of the element are used.\n     */\n    formatText(options) {\n        const reviewRequest = this.model.get('reviewRequest');\n\n        options = _.defaults({\n            bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n            isHTMLEncoded: true,\n        }, options);\n\n        if (this.allowRichText) {\n            options.richText = this._loadRichTextValue();\n        }\n\n        RB.formatText(this.$el, options);\n\n        this.$('img').on('load', () => this.trigger('resize'));\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.MultilineTextFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.TextFieldView.prototype.render.call(this);\n\n        this.formatText();\n\n        return this;\n    },\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (object):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        if (this.allowRichText) {\n            this.formatText({ newText: data });\n        }\n    },\n});\n\n\n/**\n * A field view for fields that include multiple comma-separated values.\n */\nFields.CommaSeparatedValuesTextFieldView = Fields.TextFieldView.extend({\n    useEditIconOnly: true,\n\n    /**\n     * Convert an array of items to a list of hyperlinks.\n     *\n     * Args:\n     *     list (Array);\n     *         An array of items. The contents of the item is up to the caller.\n     *\n     *     options (object):\n     *         Options to control the linking behavior.\n     *\n     * Option Args:\n     *     cssClass (string, optional):\n     *         The optional CSS class to add for each link.\n     *\n     *     makeItemText (function, optional):\n     *         A function that takes an item and returns the text for the link.\n     *         If not specified, the item itself will be used as the text.\n     *\n     *     makeItemURL (function, optional):\n     *         A function that takes an item and returns the URL for the link.\n     *         If not specified, the item itself will be used as the URL.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting link elements in a jQuery list.\n     */\n    _urlizeList(list, options={}) {\n        let $links = $();\n\n        if (list) {\n            for (let i = 0; i < list.length; i++) {\n                $links = $links.add(this._convertToLink(list[i], options));\n\n                if (i < list.length - 1) {\n                    $links = $links.add(document.createTextNode(', '));\n                }\n            }\n        }\n\n        return $links;\n    },\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n        this.$el.html(data.join(', '));\n    },\n});\n\n\n/**\n * A field view for checkbox fields.\n */\nFields.CheckboxFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.CheckboxFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        this.$el.change(() => {\n            this._saveValue(this.$el.is(':checked'))\n                .then(() => this.trigger('fieldSaved'))\n                .catch(err => this.trigger('fieldError', err.message));\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * A field view for dropdown fields.\n */\nFields.DropdownFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.DropdownFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        this.$el.change(() => {\n            this._saveValue(this.$el.val())\n                .then(() => this.trigger('fieldSaved'))\n                .catch(err => this.trigger('fieldError', err.message));\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * A field view for date fields.\n */\nFields.DateFieldView = Fields.TextFieldView.extend({\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.DateFieldView:\n     *     This object, for chaining.\n     */\n    render() {\n        Fields.TextFieldView.prototype.render.call(this);\n\n        this.inlineEditorView.$field\n            .datepicker({\n                changeMonth: true,\n                changeYear: true,\n                dateFormat: $.datepicker.ISO_8601,\n                showButtonPanel: true,\n                onSelect: (dateText, instance) => {\n                    if (dateText !== instance.lastVal) {\n                        this.inlineEditorView._dirty = true;\n                    }\n                },\n            });\n\n        return this;\n    },\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    _saveValue(value, options) {\n        const m = moment(value, 'YYYY-MM-DD', true);\n\n        if (!m.isValid()) {\n            value = '';\n            this.$el.text('');\n        }\n\n        return Fields.TextFieldView.prototype._saveValue.call(\n            this, value, options);\n    },\n});\n\n\n/**\n * The \"Branch\" field.\n */\nFields.BranchFieldView = Fields.TextFieldView.extend({\n    useExtraData: false,\n});\n\n\n/**\n * The \"Bugs\" field.\n */\nFields.BugsFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        const reviewRequest = this.model.get('reviewRequest');\n        const bugTrackerURL = reviewRequest.get('bugTrackerURL');\n\n        if (bugTrackerURL) {\n            this.$el\n                .empty()\n                .append(this._urlizeList(data, {\n                    makeItemURL: item => bugTrackerURL.replace(\n                        '--bug_id--', item),\n                    cssClass: 'bug',\n                }))\n                .find('.bug').bug_infobox();\n        } else {\n            this.$el.text(data.join(', '));\n        }\n    },\n});\n\n\n/**\n * The change description field.\n */\nFields.ChangeDescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    jsonFieldName: 'changedescription',\n    useExtraData: false,\n});\n\n\n/**\n * The commit list field.\n *\n * This provides expand/collapse functionality for commit messages that are\n * more than a single line.\n */\nFields.CommitListFieldView = Fields.BaseFieldView.extend({\n    /**\n     * Initialize the field.\n     */\n    initialize() {\n        this._commitListView = null;\n    },\n\n    /**\n     * Render the field.\n     *\n     * Returns:\n     *     RB.ReviewRequestFields.CommitListFieldView:\n     *     This view (for chaining).\n     */\n    render() {\n        Fields.BaseFieldView.prototype.render.call(this);\n\n        /*\n         * We needn't render the view because it has already been rendered by\n         * the server.\n         */\n        this._commitListView = new RB.DiffCommitListView({\n            el: this.$('.commit-list'),\n            model: new RB.DiffCommitList({\n                commits: this.model.get('commits'),\n                isInterdiff: false,\n            }),\n        });\n\n        return this;\n    },\n});\n\n\n/**\n * The close description field.\n */\nFields.CloseDescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n    editableProp: 'statusEditable',\n\n    /**\n     * Save a new value for the field.\n     *\n     * Args:\n     *     value (*):\n     *         The new value for the field.\n     *\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    _saveValue(value, options) {\n        return this.model.get('reviewRequest').close(_.defaults({\n            type: this.closeType,\n            description: value,\n            postData: {\n                force_text_type: 'html',\n                include_text_types: 'raw',\n            },\n        }, options));\n    },\n});\n\n\n/**\n * The \"Depends On\" field.\n */\nFields.DependsOnFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: data => data.search.review_requests,\n        nameKey: 'id',\n        descKey: 'id',\n        display_name: 'summary',\n        resourceName: 'search',\n        parseItem: item => {\n            item.id = item.id.toString();\n            item.display_name = item.summary;\n\n            return item;\n        },\n        extraParams: {\n            summary: 1,\n        },\n        cmp: (term, a, b) => b.data.id - a.data.id,\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.id,\n                cssClass: 'review-request-link',\n            }))\n            .find('.review-request-link').review_request_infobox();\n    },\n});\n\n\n/**\n * The \"Description\" field.\n */\nFields.DescriptionFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n});\n\n\n/**\n * The \"Owner\" field.\n */\nFields.OwnerFieldView = Fields.TextFieldView.extend({\n    autocomplete: {\n        fieldName: 'users',\n        nameKey: 'username',\n        descKey: 'fullname',\n        extraParams: {\n            fullname: 1,\n        },\n        cmp: (term, a, b) => {\n            /*\n             * Sort the results with username matches first (in alphabetical\n             * order), followed by real name matches (in alphabetical order).\n             */\n            const aUsername = a.data.username;\n            const bUsername = b.data.username;\n            const aFullname = a.data.fullname;\n            const bFullname = a.data.fullname;\n\n            if (aUsername.indexOf(term) === 0) {\n                if (bUsername.indexOf(term) === 0) {\n                    return aUsername.localeCompare(bUsername);\n                }\n\n                return -1;\n            } else if (bUsername.indexOf(term) === 0) {\n                return 1;\n            } else {\n                return aFullname.localeCompare(bFullname);\n            }\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (string):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        const $link = this._convertToLink(\n            data,\n            {\n                makeItemURL: item => {\n                    const href = item.href;\n                    return href.substr(href.indexOf('/users'));\n                },\n                makeItemText: item => item.title,\n                cssClass: 'user',\n            });\n\n        this.$el\n            .empty()\n            .append($link.user_infobox());\n    }\n});\n\n\n/**\n * The \"Summary\" field.\n */\nFields.SummaryFieldView = Fields.TextFieldView.extend({\n    useExtraData: false,\n});\n\n\n/**\n * The \"Groups\" field.\n */\nFields.TargetGroupsFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: 'groups',\n        nameKey: 'name',\n        descKey: 'display_name',\n        extraParams: {\n            displayname: 1,\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.name,\n            }));\n    },\n});\n\n\n/**\n * The \"People\" field.\n */\nFields.TargetPeopleFieldView = Fields.CommaSeparatedValuesTextFieldView.extend({\n    autocomplete: {\n        fieldName: 'users',\n        nameKey: 'username',\n        descKey: 'fullname',\n        extraParams: {\n            fullname: 1,\n        },\n        cmp: (term, a, b) => {\n            /*\n             * Sort the results with username matches first (in alphabetical\n             * order), followed by real name matches (in alphabetical order).\n             */\n            const aUsername = a.data.username;\n            const bUsername = b.data.username;\n            const aFullname = a.data.fullname;\n            const bFullname = a.data.fullname;\n\n            if (aUsername.indexOf(term) === 0) {\n                if (bUsername.indexOf(term) === 0) {\n                    return aUsername.localeCompare(bUsername);\n                }\n                return -1;\n            } else if (bUsername.indexOf(term) === 0) {\n                return 1;\n            } else {\n                return aFullname.localeCompare(bFullname);\n            }\n        },\n    },\n\n    useEditIconOnly: true,\n    useExtraData: false,\n\n    /**\n     * Format the value into the field.\n     *\n     * Args:\n     *     data (Array):\n     *         The new value of the field.\n     */\n    formatValue(data) {\n        data = data || [];\n        this.$el\n            .empty()\n            .append(this._urlizeList(data, {\n                makeItemURL: item => item.url,\n                makeItemText: item => item.username,\n                cssClass: 'user',\n            }))\n            .find('.user').user_infobox();\n    }\n});\n\n\n/**\n * The \"Testing Done\" field.\n */\nFields.TestingDoneFieldView = Fields.MultilineTextFieldView.extend({\n    allowRichText: true,\n    useExtraData: false,\n});\n\n\nRB.ReviewRequestFields = Fields;\n\n\n})();\n"],"mappings":"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"}
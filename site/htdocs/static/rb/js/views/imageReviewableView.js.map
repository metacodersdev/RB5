{"version":3,"file":"imageReviewableView.js","names":["scalingFactors","Map","BaseImageView","Backbone","View","extend","template","mode","name","initialize","$commentRegion","listenTo","model","scale","_onScaleChanged","className","loadImages","$images","get","loadsRemaining","length","_$images","each","ix","image","$image","$","data","undefined","onload","console","assert","width","height","css","onImagesLoaded","trigger","getSelectionRegion","$region","offset","position","left","getExtents","top","filename","includes","getInitialSize","maxWidth","$el","closest","scales","Array","from","keys","filter","f","i","set","index","el","ImageAttachmentView","tagName","render","attr","title","src","$img","eq","ImageDifferenceDiffView","_","join","_super","call","_origImage","_modifiedImage","html","attributes","_$canvas","Image","origImage","modifiedImage","_maxWidth","Math","max","_maxHeight","$modifiedCanvas","origContext","getContext","drawImage","modifiedContext","origImageData","getImageData","origPixels","modifiedPixels","min","putImageData","ImageOnionDiffView","DEFAULT_OPACITY","_$origImage","_$modifiedImage","_$modifiedImageContainer","parent","slider","value","slide","e","ui","setOpacity","percentage","_resize","origW","origH","newW","newH","ImageSplitDiffView","DEFAULT_SPLIT_PCT","_$origSplitContainer","_$modifiedSplitContainer","_$slider","setSplitPercentage","outerWidth","$origImageContainer","maxH","maxOuterH","ImageTwoUpDiffView","RB","ImageReviewableView","FileAttachmentReviewableView","commentBlockView","RegionCommentBlockView","events","modeItemTemplate","captionTableTemplate","captionItemTemplate","errorTemplate","ANIM_SPEED_MS","prototype","apply","arguments","bindAll","_activeSelection","_diffModeSelectors","_diffModeViews","_commentBlockViews","on","setSelectionRegionSizeFunc","pick","_imageView","setScale","_$selectionArea","append","push","without","forEach","view","text","defer","_adjustPos","renderContent","hasDiff","addClass","hide","proxyTouchEvents","_$selectionRect","prependTo","hover","show","is","commentDlg","$wrapper","errorStr","_$modeBar","appendTo","_$imageDiffs","_addDiffMode","_setDiffMode","window","$header","$revisionLabel","_revisionLabelView","FileAttachmentRevisionLabelView","_onRevisionSelected","$revisionSelector","_revisionSelectorView","FileAttachmentRevisionSelectorView","renderedInline","captionItems","caption","interpolate","revision","items","$captionBar","$resolutionMenu","$menu","find","after","revisions","revisionIDs","base","tip","revisionTip","redirectURL","revisionBase","location","replace","ViewClass","$selector","selectorWidth","removeClass","newView","animate","duration","fadeOut","_showDiffMode","stopListening","fadeIn","_onImageModeClicked","preventDefault","stopPropagation","target","_onImageZoomLevelClicked","_onMouseDown","which","hasClass","beginX","pageX","floor","beginY","pageY","updateData","close","_onMouseUp","createAndEditCommentBlock","x","y","_onMouseMove","region"],"sources":["../../../../../static/rb/js/views/imageReviewableView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * A mapping of available image scaling factors to the associated label.\n */\nconst scalingFactors = new Map([\n    [0.33, '33%'],\n    [0.5, '50%'],\n    [1.0, '100%'],\n    [2.0, '200%'],\n]);\n\n\n/**\n * Base class for providing a view onto an image or diff of images.\n *\n * This handles the common functionality, such as loading images, determining\n * the image region, rendering, and so on.\n *\n * Subclasses must, at a minimum, provide a 'mode', 'name', and must set\n * $commentRegion to an element representing the region where comments are\n * allowed.\n */\nconst BaseImageView = Backbone.View.extend({\n    template: null,\n    mode: null,\n    name: null,\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.$commentRegion = null;\n\n        this.listenTo(this.model,\n                      'change:scale',\n                      (model, scale) => this._onScaleChanged(scale));\n    },\n\n    /**\n     * Compute a CSS class name for this view.\n     *\n     * Returns:\n     *     string:\n     *     A class name based on the current mode.\n     */\n    className() {\n        return `image-diff-${this.mode}`;\n    },\n\n    /**\n     * Load a list of images.\n     *\n     * Once each image is loaded, the view's onImagesLoaded function will\n     * be called. Subclasses can override this to provide functionality based\n     * on image sizes and content.\n     *\n     * Args:\n     *     $images (jQuery):\n     *         The image elements to load.\n     */\n    loadImages($images) {\n        const scale = this.model.get('scale');\n\n        let loadsRemaining = $images.length;\n\n        this._$images = $images;\n\n        $images.each((ix, image) => {\n            const $image = $(image);\n\n            if ($image.data('initial-width') === undefined) {\n                image.onload = () => {\n                    loadsRemaining--;\n                    console.assert(loadsRemaining >= 0);\n\n                    $image\n                        .data({\n                            'initial-width': image.width,\n                            'initial-height': image.height,\n                        })\n                        .css({\n                            width: image.width * scale,\n                            height: image.height * scale,\n                        });\n\n                    if (loadsRemaining === 0) {\n                        this.onImagesLoaded();\n                        this.trigger('regionChanged');\n                    }\n                };\n            } else {\n                loadsRemaining--;\n                if (loadsRemaining === 0) {\n                    this.onImagesLoaded();\n                    this.trigger('regionChanged');\n                }\n            }\n        });\n    },\n\n    /**\n     * Return the region of the view where commenting can take place.\n     *\n     * The region is based on the $commentRegion member variable, which must\n     * be set by a subclass.\n     *\n     * Returns:\n     *     object:\n     *     An object with ``left``, ``top``, ``width``, and ``height`` keys.\n     */\n    getSelectionRegion() {\n        const $region = this.$commentRegion;\n        const offset = $region.position();\n\n        /*\n         * The margin: 0 auto means that position.left() will return\n         * the left-most part of the entire block, rather than the actual\n         * position of the region on Chrome. Every other browser returns 0\n         * for this margin, as we'd expect. So, just play it safe and\n         * offset by the margin-left. (Bug #1050)\n         */\n        offset.left += $region.getExtents('m', 'l');\n\n        return {\n            left: offset.left,\n            top: offset.top,\n            width: $region.width(),\n            height: $region.height()\n        };\n    },\n\n    /**\n     * Callback handler for when the images on the view are loaded.\n     *\n     * Subclasses that override this method must call the base method so that\n     * images can be scaled appropriately.\n     */\n    onImagesLoaded() {\n        let scale = null;\n\n        /*\n         * If the image is obviously a 2x or 3x pixel ratio, pre-select the\n         * right scaling factor.\n         *\n         * Otherwise, we select the largest scaling factor that allows the\n         * entire image to be shown (or the smallest scaling factor if the\n         * scaled image is still too large).\n         */\n        const filename = this.model.get('filename');\n\n        /*\n         * The `filename` attribute does not exist for screenshots, so we need\n         * to check it.\n         */\n        if (filename) {\n            if (filename.includes('@2x.')) {\n                scale = 0.5;\n            } else if (filename.includes('@3x.')) {\n                scale = 0.33;\n            }\n        }\n\n        if (scale === null) {\n            const {width} = this.getInitialSize();\n            const maxWidth = this.$el.closest('.image-content').width();\n            const scales = Array\n                .from(scalingFactors.keys())\n                .filter(f => (f <= 1));\n\n            for (let i = scales.length - 1; i >= 0; i--) {\n                scale = scales[i];\n\n                if (width * scale <= maxWidth) {\n                    break;\n                }\n            }\n        }\n\n        this.model.set('scale', scale);\n    },\n\n    /**\n     * Handle the image scale being changed.\n     *\n     * Args:\n     *     scale (number):\n     *         The new image scaling factor (where 1.0 is 100%, 0.5 is 50%,\n     *         etc).\n     */\n    _onScaleChanged(scale) {\n        this._$images.each((index, el) => {\n            const $image = $(el);\n\n            $image.css({\n                width: $image.data('initial-width') * scale,\n                height: $image.data('initial-height') * scale,\n            });\n        });\n    },\n\n    /**\n     * Return the initial size of the image.\n     *\n     * Subclasses must override this.\n     *\n     * Returns:\n     *     object:\n     *     An object containing the initial height and width of the image.\n     */\n    getInitialSize() {\n        console.assert(\n            false, 'subclass of BaseImageView must implement getInitialSize');\n    },\n});\n\n\n/**\n * Displays a single image.\n *\n * This view is used for standalone images, without diffs. It displays the\n * image and allows it to be commented on.\n */\nconst ImageAttachmentView = BaseImageView.extend({\n    mode: 'attachment',\n    tagName: 'img',\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     ImageAttachmentView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.attr({\n            title: this.model.get('caption'),\n            src: this.model.get('imageURL')\n        });\n\n        this.$commentRegion = this.$el;\n\n        this.loadImages(this.$el);\n\n        return this;\n    },\n\n    /**\n     * Return the initial size of the image.\n     *\n     * Subclasses must override this.\n     *\n     * Returns:\n     *     object:\n     *     An object containing the initial height and width of the image.\n     */\n    getInitialSize() {\n        const $img = this._$images.eq(0);\n\n        return {\n            width: $img.data('initial-width'),\n            height: $img.height('initial-height'),\n        };\n    },\n});\n\n\n/**\n * Displays a color difference view of two images.\n *\n * Each pixel in common between images will be shown in black. Added pixels\n * in the new image are shown as they would in the image itself. Differences\n * in pixel values are shown as well.\n *\n * See:\n * http://jeffkreeftmeijer.com/2011/comparing-images-and-creating-image-diffs/\n */\nconst ImageDifferenceDiffView = BaseImageView.extend({\n    mode: 'difference',\n    name: gettext('Difference'),\n\n    template: _.template([\n        '<div class=\"image-container\">',\n        ' <canvas></canvas>',\n        '</div>'\n    ].join('')),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.call(this);\n\n        this._origImage = null;\n        this._modifiedImage = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Image elements representing the original and modified images will be\n     * created and loaded. After loading, onImagesLoaded will handle populating\n     * the canvas with the difference view.\n     *\n     * Returns:\n     *     ImageDifferenceDiffView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template(this.model.attributes));\n\n        this.$commentRegion = this.$('canvas');\n        this._$canvas = this.$commentRegion;\n\n        this._origImage = new Image();\n        this._origImage.src = this.model.get('diffAgainstImageURL');\n\n        this._modifiedImage = new Image();\n        this._modifiedImage.src = this.model.get('imageURL');\n\n        this.loadImages($([this._origImage, this._modifiedImage]));\n\n        return this;\n    },\n\n    /**\n     * Render the difference between two images onto the canvas.\n     */\n    onImagesLoaded() {\n        const origImage = this._origImage;\n        const modifiedImage = this._modifiedImage;\n        const scale = this.model.get('scale');\n\n        this._maxWidth = Math.max(origImage.width, modifiedImage.width);\n        this._maxHeight = Math.max(origImage.height, modifiedImage.height);\n\n        _super(this).onImagesLoaded.call(this);\n\n        this._$canvas\n            .attr({\n                width: this._maxWidth,\n                height: this._maxHeight\n            })\n            .css({\n                width: this._maxWidth * scale + 'px',\n                height: this._maxHeight * scale + 'px'\n            });\n\n        const $modifiedCanvas = $('<canvas/>')\n            .attr({\n                width: this._maxWidth,\n                height: this._maxHeight\n            });\n\n        const origContext = this._$canvas[0].getContext('2d');\n        origContext.drawImage(origImage, 0, 0);\n\n        const modifiedContext = $modifiedCanvas[0].getContext('2d');\n        modifiedContext.drawImage(modifiedImage, 0, 0);\n\n        const origImageData = origContext.getImageData(\n            0, 0, this._maxWidth, this._maxHeight);\n        const origPixels = origImageData.data;\n\n        const modifiedPixels = modifiedContext.getImageData(\n            0, 0, this._maxWidth, this._maxHeight).data;\n\n        for (let i = 0; i < origPixels.length; i += 4) {\n            origPixels[i] += modifiedPixels[i] -\n                             2 * Math.min(origPixels[i], modifiedPixels[i]);\n            origPixels[i + 1] += modifiedPixels[i + 1] -\n                                 2 * Math.min(origPixels[i + 1],\n                                              modifiedPixels[i + 1]);\n            origPixels[i + 2] += modifiedPixels[i + 2] -\n                                 2 * Math.min(origPixels[i + 2],\n                                              modifiedPixels[i + 2]);\n            origPixels[i + 3] = modifiedPixels[i + 3];\n        }\n\n        origContext.putImageData(origImageData, 0, 0);\n    },\n\n    /**\n     * Handle the image scale being changed.\n     *\n     * Args:\n     *     scale (number):\n     *         The new image scaling factor (where 1.0 is 100%, 0.5 is 50%,\n     *         etc).\n     */\n    _onScaleChanged(scale) {\n        this._$canvas.css({\n            width: this._maxWidth * scale + 'px',\n            height: this._maxHeight * scale + 'px',\n        });\n    },\n\n    /**\n     * Return the initial size of the image.\n     *\n     * Returns:\n     *     object:\n     *     An object containing the initial height and width of the image.\n     */\n    getInitialSize() {\n        return {\n            width: this._maxWidth,\n            height: this._maxHeight,\n        };\n    },\n});\n\n\n/**\n * Displays an onion skin view of two images.\n *\n * Onion skinning allows the user to see subtle changes in two images by\n * altering the transparency of the modified image. Through a slider, they'll\n * be able to play around with the transparency and see if any pixels move,\n * disappear, or otherwise change.\n */\nconst ImageOnionDiffView = BaseImageView.extend({\n    mode: 'onion',\n    name: gettext('Onion Skin'),\n\n    template: _.template([\n        '<div class=\"image-containers\">',\n        ' <div class=\"orig-image\">',\n        '  <img title=\"<%- caption %>\" src=\"<%- diffAgainstImageURL %>\" />',\n        ' </div>',\n        ' <div class=\"modified-image\">',\n        '  <img title=\"<%- caption %>\" src=\"<%- imageURL %>\" />',\n        ' </div>',\n        '</div>',\n        '<div class=\"image-slider\"></div>'\n    ].join('')),\n\n    DEFAULT_OPACITY: 0.25,\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.call(this);\n\n        this._$origImage = null;\n        this._$modifiedImage = null;\n        this._$modifiedImageContainer = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the slider and set it to a default of 25% opacity.\n     *\n     * Returns:\n     *     ImageOnionDiffView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template(this.model.attributes));\n\n        this.$commentRegion = this.$('.image-containers');\n        this._$origImage = this.$('.orig-image img');\n        this._$modifiedImage = this.$('.modified-image img');\n        this._$modifiedImageContainer = this._$modifiedImage.parent();\n\n        this.$('.image-slider')\n            .slider({\n                value: this.DEFAULT_OPACITY * 100,\n                slide: (e, ui) => this.setOpacity(ui.value / 100.0)\n            });\n\n        this.setOpacity(this.DEFAULT_OPACITY);\n\n        this.loadImages(this.$('img'));\n\n        return this;\n    },\n\n    /**\n     * Set the opacity value for the images.\n     *\n     * Args:\n     *     percentage (number):\n     *         The opacity percentage, in [0.0, 1.0].\n     */\n    setOpacity(percentage) {\n        this._$modifiedImageContainer.css('opacity', percentage);\n    },\n\n    /**\n     * Position the images after they load.\n     *\n     * The images will be layered on top of each other, consuming the\n     * same width and height.\n     */\n    onImagesLoaded() {\n        _super(this).onImagesLoaded.call(this);\n        this._resize();\n    },\n\n    /**\n     * Handle the image scale being changed.\n     *\n     * Args:\n     *     scale (number):\n     *         The new image scaling factor (where 1.0 is 100%, 0.5 is 50%,\n     *         etc).\n     */\n    _onScaleChanged(scale) {\n        _super(this)._onScaleChanged.call(this, scale);\n        this._resize();\n    },\n\n    /**\n     * Resize the image containers.\n     */\n    _resize() {\n        const scale = this.model.get('scale');\n        const origW = this._$origImage.data('initial-width') * scale;\n        const origH = this._$origImage.data('initial-height') * scale;\n        const newW = this._$modifiedImage.data('initial-width') * scale;\n        const newH = this._$modifiedImage.data('initial-height') * scale;\n\n        this._$origImage.parent()\n            .width(origW)\n            .height(origH);\n\n        this._$modifiedImage.parent()\n            .width(newW)\n            .height(newH);\n\n        this.$('.image-containers')\n            .width(Math.max(origW, newW))\n            .height(Math.max(origH, newH));\n    },\n\n    /**\n     * Return the initial size of the image.\n     *\n     * Returns:\n     *     object:\n     *     An object containing the initial height and width of the image.\n     */\n    getInitialSize() {\n        return {\n            width: Math.max(this._$origImage.data('initial-width'),\n                            this._$modifiedImage.data('initial-width')),\n            height: Math.max(this._$origImage.data('initial-height'),\n                             this._$modifiedImage.data('initial-height')),\n        };\n    },\n});\n\n\n/**\n * Displays an overlapping split view between two images.\n *\n * The images will be overlapping, and a horizontal slider will control how\n * much of the modified image is shown. The modified image will overlap the\n * original image. This makes it easy to compare the two images incrementally.\n */\nconst ImageSplitDiffView = BaseImageView.extend({\n    mode: 'split',\n    name: gettext('Split'),\n\n    template: _.template([\n        '<div class=\"image-containers\">',\n        ' <div class=\"image-diff-split-container-orig\">',\n        '  <div class=\"orig-image\">',\n        '   <img title=\"<%- caption %>\" src=\"<%- diffAgainstImageURL %>\" />',\n        '  </div>',\n        ' </div>',\n        ' <div class=\"image-diff-split-container-modified\">',\n        '  <div class=\"modified-image\">',\n        '   <img title=\"<%- caption %>\" src=\"<%- imageURL %>\" />',\n        '  </div>',\n        ' </div>',\n        '</div>',\n        '<div class=\"image-slider\"></div>'\n    ].join('')),\n\n    // The default slider position of 25%\n    DEFAULT_SPLIT_PCT: 0.25,\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.call(this);\n\n        this._$modifiedImage = null;\n        this._$origImage = null;\n        this._$origSplitContainer = null;\n        this._$modifiedSplitContainer = null;\n        this._$slider = null;\n        this._maxWidth = 0;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     ImageSplitDiffView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template(this.model.attributes));\n\n        this.$commentRegion = this.$('.image-containers');\n        this._$origImage = this.$('.orig-image img');\n        this._$modifiedImage = this.$('.modified-image img');\n        this._$origSplitContainer = this.$('.image-diff-split-container-orig');\n        this._$modifiedSplitContainer =\n            this.$('.image-diff-split-container-modified');\n\n        this._$slider = this.$('.image-slider')\n            .slider({\n                value: this.DEFAULT_SPLIT_PCT * 100,\n                slide: (e, ui) => this.setSplitPercentage(ui.value / 100.0)\n            });\n\n        this.loadImages(this.$('img'));\n\n        return this;\n    },\n\n    /**\n     * Set the percentage for the split view.\n     *\n     * Args:\n     *     percentage (number):\n     *         The position of the slider, in [0.0, 1.0].\n     */\n    setSplitPercentage(percentage) {\n        this._$origSplitContainer.outerWidth(this._maxWidth * percentage);\n        this._$modifiedSplitContainer.outerWidth(\n            this._maxWidth * (1.0 - percentage));\n    },\n\n    /**\n     * Position the images after they load.\n     *\n     * The images will be layered on top of each other, anchored to the\n     * top-left.\n     *\n     * The slider will match the width of the two images, in order to\n     * position the slider's handle with the divider between images.\n     */\n    onImagesLoaded() {\n        _super(this).onImagesLoaded.call(this);\n        this._resize();\n    },\n\n    /**\n     * Handle the image scale being changed.\n     *\n     * Args:\n     *     scale (number):\n     *         The new image scaling factor (where 1.0 is 100%, 0.5 is 50%,\n     *         etc).\n     */\n    _onScaleChanged(scale) {\n        _super(this)._onScaleChanged.call(this, scale);\n        this._resize();\n    },\n\n    /**\n     * Resize the image containers.\n     */\n    _resize() {\n        const $origImageContainer = this._$origImage.parent();\n        const scale = this.model.get('scale');\n        const origW = this._$origImage.data('initial-width') * scale;\n        const origH = this._$origImage.data('initial-height') * scale;\n        const newW = this._$modifiedImage.data('initial-width') * scale;\n        const newH = this._$modifiedImage.data('initial-height') * scale;\n        const maxH = Math.max(origH, newH);\n        const maxOuterH = maxH + $origImageContainer.getExtents('b', 'tb');\n\n        this._maxWidth = Math.max(origW, newW);\n        this._maxHeight = Math.max(origH, newH);\n\n        $origImageContainer\n            .outerWidth(origW)\n            .height(origH);\n\n        this._$modifiedImage.parent()\n            .outerWidth(newW)\n            .height(newH);\n\n        this._$origSplitContainer\n            .outerWidth(this._maxWidth)\n            .height(maxOuterH);\n\n        this._$modifiedSplitContainer\n            .outerWidth(this._maxWidth)\n            .height(maxOuterH);\n\n        this.$('.image-containers')\n            .width(this._maxWidth)\n            .height(maxH);\n\n        this._$slider.width(this._maxWidth);\n\n        /* Now that these are loaded, set the default for the split. */\n        this.setSplitPercentage(this.DEFAULT_SPLIT_PCT);\n    },\n\n    /**\n     * Return the initial size of the image.\n     *\n     * Returns:\n     *     object:\n     *     An object containing the initial height and width of the image.\n     */\n    getInitialSize() {\n        return {\n            width: this._maxWidth,\n            height: this._maxHeight,\n        };\n    },\n});\n\n\n/**\n * Displays a two-up, side-by-side view of two images.\n *\n * The images will be displayed horizontally, side-by-side. Comments will\n * only be able to be added against the new file.\n */\nconst ImageTwoUpDiffView = BaseImageView.extend({\n    mode: 'two-up',\n    name: gettext('Two-Up'),\n\n    template: _.template([\n        '<div class=\"image-container image-container-orig\">',\n        ' <div class=\"orig-image\">',\n        '  <img title=\"<%- caption %>\" src=\"<%- diffAgainstImageURL %>\" />',\n        ' </div>',\n        '</div>',\n        '<div class=\"image-container image-container-modified\">',\n        ' <div class=\"modified-image\">',\n        '  <img title=\"<%- caption %>\" src=\"<%- imageURL %>\" />',\n        ' </div>',\n        '</div>'\n    ].join('')),\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     ImageTwoUpDiffView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template(this.model.attributes));\n        this.$commentRegion = this.$('.modified-image img');\n\n        this._$origImage = this.$('.orig-image img');\n        this._$modifiedImage = this.$('.modified-image img');\n\n        this.loadImages(this.$('img'));\n\n        return this;\n    },\n\n    /**\n     * Return the initial size of the image.\n     *\n     * Returns:\n     *     object:\n     *     An object containing the initial height and width of the image.\n     */\n    getInitialSize() {\n        return {\n            width: Math.max(this._$origImage.data('initial-width'),\n                            this._$modifiedImage.data('initial-width')),\n            height: Math.max(this._$origImage.data('initial-height'),\n                             this._$modifiedImage.data('initial-height')),\n        };\n    },\n});\n\n\n/**\n * Displays a review UI for images.\n *\n * This supports reviewing individual images, and diffs between images.\n *\n * In the case of individual images, the image will be displayed, centered,\n * and all existing comments will be shown as selection boxes on top of it.\n * Users can click and drag across part of the image to leave a comment on\n * that area.\n *\n * Image diffs can be shown in multiple modes. This supports a \"two-up\"\n * side-by-side view, an overlapping split view, Onion Skinning view, and\n * a color difference view.\n */\nRB.ImageReviewableView = RB.FileAttachmentReviewableView.extend({\n    className: 'image-review-ui',\n\n    commentBlockView: RB.RegionCommentBlockView,\n\n    events: {\n        'click .image-diff-mode': '_onImageModeClicked',\n        'click .image-resolution-menu .menu-item': '_onImageZoomLevelClicked',\n        'mousedown .selection-container': '_onMouseDown',\n        'mouseup .selection-container': '_onMouseUp',\n        'mousemove .selection-container': '_onMouseMove'\n    },\n\n    modeItemTemplate: _.template(\n        '<li><a class=\"image-diff-mode\" href=\"#\" data-mode=\"<%- mode %>\"><%- name %></a></li>'\n    ),\n\n    captionTableTemplate: _.template(\n        '<table><tr><%= items %></tr></table>'\n    ),\n\n    captionItemTemplate: _.template([\n        '<td>',\n        ' <h1 class=\"caption\">',\n        '  <%- caption %>',\n        ' </h1>',\n        '</td>'\n    ].join('')),\n\n    errorTemplate: _.template([\n        '<div class=\"review-ui-error\">',\n        ' <div class=\"rb-icon rb-icon-warning\"></div>',\n        ' <%- errorStr %>',\n        '</div>'\n        ].join('')),\n\n    ANIM_SPEED_MS: 200,\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        RB.FileAttachmentReviewableView.prototype.initialize.apply(\n            this, arguments);\n\n        _.bindAll(this, '_adjustPos');\n\n        this._activeSelection = {};\n        this._diffModeSelectors = {};\n        this._diffModeViews = {};\n        this._commentBlockViews = [];\n\n        /*\n         * Add any CommentBlockViews to the selection area when they're\n         * created.\n         */\n        this.on('commentBlockViewAdded', commentBlockView => {\n            commentBlockView.setSelectionRegionSizeFunc(\n                () => _.pick(this._imageView.getSelectionRegion(),\n                             'width', 'height'));\n            commentBlockView.setScale(this.model.get('scale'));\n\n            this._$selectionArea.append(commentBlockView.$el);\n\n            this._commentBlockViews.push(commentBlockView);\n            this.listenTo(\n                commentBlockView, 'removing', () => {\n                    this._commentBlockViews =\n                        _.without(this._commentBlockViews, commentBlockView);\n                });\n        });\n\n        this.listenTo(this.model, 'change:scale', (model, scale) => {\n            this._commentBlockViews.forEach(view => view.setScale(scale));\n\n            this.$('.image-resolution-menu-current')\n                .text(scalingFactors.get(scale));\n\n            /*\n             * We must wait for the image views to finish scaling themselves,\n             * otherwise the comment blocks will be in incorrect places.\n             */\n            _.defer(this._adjustPos);\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up a selection area over the image and create a\n     * selection rectangle that will be shown when dragging.\n     *\n     * Any time the window resizes, the comment positions will be adjusted.\n     *\n     * Returns:\n     *     RB.ImageReviewableView:\n     *     This object, for chaining.\n     */\n    renderContent() {\n        const hasDiff = !!this.model.get('diffAgainstFileAttachmentID');\n\n        this._$selectionArea = $('<div/>')\n            .addClass('selection-container')\n            .hide()\n            .proxyTouchEvents();\n\n        this._$selectionRect = $('<div/>')\n            .addClass('selection-rect')\n            .prependTo(this._$selectionArea)\n            .proxyTouchEvents()\n            .hide();\n\n        this.$el\n            /*\n             * Register a hover event to hide the comments when the mouse\n             * is not over the comment area.\n             */\n            .hover(\n                () => {\n                    this._$selectionArea.show();\n                    this._adjustPos();\n                },\n                () => {\n                    if (this._$selectionRect.is(':hidden') &&\n                        !this.commentDlg) {\n                        this._$selectionArea.hide();\n                    }\n                });\n\n        const $wrapper = $('<div class=\"image-content\" />')\n            .append(this._$selectionArea);\n\n        if (this.model.get('diffTypeMismatch')) {\n            this.$el.append(this.errorTemplate({\n                errorStr: gettext('These revisions cannot be compared because they are different file types.')\n            }));\n        } else if (hasDiff) {\n            this._$modeBar = $('<ul class=\"image-diff-modes\"/>')\n                .appendTo(this.$el);\n\n            this._$imageDiffs = $('<div class=\"image-diffs\"/>');\n\n            this._addDiffMode(ImageTwoUpDiffView);\n            this._addDiffMode(ImageDifferenceDiffView);\n            this._addDiffMode(ImageSplitDiffView);\n            this._addDiffMode(ImageOnionDiffView);\n\n            $wrapper\n                .append(this._$imageDiffs)\n                .appendTo(this.$el);\n\n            this._setDiffMode(ImageTwoUpDiffView.prototype.mode);\n        } else {\n            this._imageView = new ImageAttachmentView({\n                model: this.model\n            });\n\n            $wrapper\n                .append(this._imageView.$el)\n                .appendTo(this.$el);\n\n            this._imageView.render();\n        }\n\n        /*\n         * Reposition the selection area on page resize or loaded, so that\n         * comments are in the right locations.\n         */\n        $(window).on({\n            'load': this._adjustPos,\n            'resize': this._adjustPos,\n        });\n\n        const $header = $('<div />')\n            .addClass('review-ui-header')\n            .prependTo(this.$el);\n\n        if (this.model.get('numRevisions') > 1) {\n            const $revisionLabel = $('<div id=\"revision_label\" />')\n                .appendTo($header);\n            this._revisionLabelView = new RB.FileAttachmentRevisionLabelView({\n                el: $revisionLabel,\n                model: this.model\n            });\n            this._revisionLabelView.render();\n            this.listenTo(this._revisionLabelView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            const $revisionSelector = $('<div id=\"attachment_revision_selector\" />')\n                .appendTo($header);\n            this._revisionSelectorView = new RB.FileAttachmentRevisionSelectorView({\n                el: $revisionSelector,\n                model: this.model\n            });\n            this._revisionSelectorView.render();\n            this.listenTo(this._revisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            if (!this.renderedInline) {\n                if (hasDiff) {\n                    const captionItems = [\n                        this.captionItemTemplate({\n                            caption: interpolate(\n                                gettext('%(caption)s (revision %(revision)s)'),\n                                {\n                                    caption: this.model.get('diffCaption'),\n                                    revision: this.model.get('diffRevision')\n                                },\n                                true)\n                        }),\n                        this.captionItemTemplate({\n                            caption: interpolate(\n                                gettext('%(caption)s (revision %(revision)s)'),\n                                {\n                                    caption: this.model.get('caption'),\n                                    revision: this.model.get('fileRevision')\n                                },\n                                true)\n                        })\n                    ];\n\n                    $header.append(this.captionTableTemplate({\n                        items: captionItems.join('')\n                    }));\n                } else {\n                    const $captionBar = $('<div class=\"image-single-revision\">')\n                        .appendTo($header);\n\n                    $('<h1 class=\"caption\" />')\n                        .text(interpolate(\n                            gettext('%(caption)s (revision %(revision)s)'),\n                            {\n                                caption: this.model.get('caption'),\n                                revision: this.model.get('fileRevision')\n                            },\n                            true))\n                        .appendTo($captionBar);\n                }\n            }\n        } else {\n            if (!this.renderedInline) {\n                $header.addClass('image-single-revision');\n\n                $('<h1 class=\"caption\" />')\n                    .text(this.model.get('caption'))\n                    .appendTo($header);\n            }\n        }\n\n        const $resolutionMenu = $([\n          '<li class=\"image-resolution-menu has-menu\">',\n          ' <a href=\"#\" class=\"menu-header\">',\n          '  <span class=\"fa fa-search-plus\"></span>',\n          '  <span class=\"image-resolution-menu-current\">100%</span>',\n          '  <span class=\"rb-icon rb-icon-dropdown-arrow\">',\n          ' </a>',\n          ' <ul class=\"menu\" />',\n          '</li>',\n        ].join(''));\n        const $menu = $resolutionMenu.find('.menu');\n\n        scalingFactors.forEach((text, scale) => {\n            $(`<li class=\"menu-item\" data-image-scale=\"${scale}\" />`)\n                .text(text)\n                .appendTo($menu);\n        });\n\n        if (hasDiff) {\n            this._$modeBar.append($resolutionMenu);\n        } else {\n            this.$('.caption').after($resolutionMenu);\n        }\n    },\n\n    /**\n     * Callback for when a new file revision is selected.\n     *\n     * This supports single revisions and diffs. If 'base' is 0, a\n     * single revision is selected, If not, the diff between `base` and\n     * `tip` will be shown.\n     *\n     * Args:\n     *     revisions (Array of number):\n     *         A two-element array of [base, tip] revisions.\n     */\n    _onRevisionSelected(revisions) {\n        const revisionIDs = this.model.get('attachmentRevisionIDs');\n        const [base, tip] = revisions;\n\n        // Ignore clicks on No Diff Label\n        if (tip === 0) {\n            return;\n        }\n\n        /*\n         * Eventually these hard redirects will use a router\n         * (see diffViewerPageView.js for example)\n         * this.router.navigate(base + '-' + tip + '/', {trigger: true});\n         */\n        const revisionTip = revisionIDs[tip-1];\n        let redirectURL;\n\n        if (base === 0) {\n            redirectURL = `../${revisionTip}/`;\n        } else {\n            const revisionBase = revisionIDs[base-1];\n            redirectURL = `../${revisionBase}-${revisionTip}/`;\n        }\n\n        window.location.replace(redirectURL);\n    },\n\n    /**\n     * Register a diff mode.\n     *\n     * This will register a class for the mode and add an entry to the\n     * mode bar.\n     *\n     * Args:\n     *     ViewClass (function):\n     *         The constructor for the view class.\n     */\n    _addDiffMode(ViewClass) {\n        const mode = ViewClass.prototype.mode;\n        const view = new ViewClass({\n            model: this.model\n        });\n\n        this._diffModeViews[mode] = view;\n        view.$el.hide();\n        this._$imageDiffs.append(view.$el);\n        view.render();\n\n        const $selector = $(this.modeItemTemplate({\n            mode: mode,\n            name: view.name\n        }));\n\n        /*\n         * Since we're making the text bold when selected, we need to reserve\n         * the right amount of space for the bold text, so that the contents\n         * don't shift.\n         *\n         * This is kind of ugly, but really the only good way.\n         */\n        $selector\n            .appendTo(this._$modeBar)\n            .addClass('selected');\n        const selectorWidth = $selector.outerWidth(true);\n        $selector\n            .removeClass('selected')\n            .width(selectorWidth);\n\n        this._diffModeSelectors[mode] = $selector;\n    },\n\n    /**\n     * Set the current diff mode.\n     *\n     * That mode will be displayed on the page and comments will be shown.\n     *\n     * The height of the review UI will animate to the new height for this\n     * mode.\n     *\n     * Args:\n     *     mode (string):\n     *         The new diff mode.\n     */\n    _setDiffMode(mode) {\n        const newView = this._diffModeViews[mode];\n\n        if (this._imageView) {\n            this._diffModeSelectors[this._imageView.mode]\n                .removeClass('selected');\n\n            newView.$el.show();\n            const height = newView.$el.height();\n            newView.$el.hide();\n\n            this._$imageDiffs.animate({\n                height: height,\n                duration: this.ANIM_SPEED_MS\n            });\n\n            this._$selectionArea.fadeOut(this.ANIM_SPEED_MS);\n            this._imageView.$el.fadeOut(\n                this.ANIM_SPEED_MS,\n                () => this._showDiffMode(newView, true));\n        } else {\n            this._showDiffMode(newView);\n        }\n\n        this._diffModeSelectors[newView.mode]\n            .addClass('selected');\n    },\n\n    /**\n     * Show the diff mode.\n     *\n     * This is called by _setDiffMode when it's ready to actually show the\n     * new mode.\n     *\n     * The new mode will be faded in, if we're animating, or immediately shown\n     * otherwise.\n     *\n     * Args:\n     *     newView (Backbone.View):\n     *         The new view to show.\n     *\n     *     animate (boolean):\n     *         Whether to animate the transition.\n     */\n    _showDiffMode(newView, animate) {\n        if (this._imageView) {\n            this.stopListening(this._imageView, 'regionChanged');\n        }\n\n        this._imageView = newView;\n\n        if (animate) {\n            this._imageView.$el.fadeIn(this.ANIM_SPEED_MS);\n            this._$selectionArea.fadeIn(this.ANIM_SPEED_MS);\n        } else {\n            this._imageView.$el.show();\n            this._$selectionArea.show();\n        }\n\n        this.listenTo(this._imageView, 'regionChanged', this._adjustPos);\n\n        this._adjustPos();\n    },\n\n    /**\n     * Handler for when a mode in the diff mode bar is clicked.\n     *\n     * Sets the diff view to the given mode.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onImageModeClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._setDiffMode($(e.target).data('mode'));\n    },\n\n    /**\n     * Handler for when a zoom level is clicked.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onImageZoomLevelClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.model.set('scale', $(e.target).data('image-scale'));\n    },\n\n    /**\n     * Handle a mousedown on the selection area.\n     *\n     * If this is the first mouse button, and it's not being placed on\n     * an existing comment block, then this will begin the creation of a new\n     * comment block starting at the mousedown coordinates.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onMouseDown(e) {\n        if (e.which === 1 &&\n            !this.commentDlg &&\n            !$(e.target).hasClass('selection-flag')) {\n            const offset = this._$selectionArea.offset();\n\n            this._activeSelection.beginX =\n                e.pageX - Math.floor(offset.left) - 1;\n            this._activeSelection.beginY =\n                e.pageY - Math.floor(offset.top) - 1;\n\n            const updateData = {\n                left: this._activeSelection.beginX,\n                top: this._activeSelection.beginY,\n                width: 1,\n                height: 1\n            };\n\n            this._$selectionRect\n                .css(updateData)\n                .data(updateData)\n                .show();\n\n            if (this._$selectionRect.is(':hidden')) {\n                this.commentDlg.close();\n            }\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle a mouseup on the selection area.\n     *\n     * This will finalize the creation of a comment block and pop up the\n     * comment dialog.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onMouseUp(e) {\n        if (!this.commentDlg &&\n            this._$selectionRect.is(':visible')) {\n            e.stopPropagation();\n            this._$selectionRect.hide();\n\n            /*\n             * If we don't pass an arbitrary minimum size threshold,\n             * don't do anything. This helps avoid making people mad\n             * if they accidentally click on the image.\n             */\n            const position = this._$selectionRect.data();\n            const scale = this.model.get('scale');\n\n            if (position.width > 5 && position.height > 5) {\n                this.createAndEditCommentBlock({\n                    x: Math.floor(position.left / scale),\n                    y: Math.floor(position.top / scale),\n                    width: Math.floor(position.width / scale),\n                    height: Math.floor(position.height / scale),\n                });\n            }\n        }\n    },\n\n    /**\n     * Handle a mousemove on the selection area.\n     *\n     * If we're creating a comment block, this will update the\n     * size/position of the block.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onMouseMove(e) {\n        if (!this.commentDlg && this._$selectionRect.is(':visible')) {\n            const offset = this._$selectionArea.offset();\n            const x = e.pageX - Math.floor(offset.left) - 1;\n            const y = e.pageY - Math.floor(offset.top) - 1;\n            const updateData = {};\n\n            if (this._activeSelection.beginX <= x) {\n                updateData.left = this._activeSelection.beginX;\n                updateData.width = x - this._activeSelection.beginX;\n            } else {\n                updateData.left = x;\n                updateData.width = this._activeSelection.beginX - x;\n            }\n\n            if (this._activeSelection.beginY <= y) {\n                updateData.top = this._activeSelection.beginY;\n                updateData.height = y - this._activeSelection.beginY;\n            } else {\n                updateData.top = y;\n                updateData.height = this._activeSelection.beginY - y;\n            }\n\n            this._$selectionRect\n                .css(updateData)\n                .data(updateData);\n\n            return false;\n        }\n    },\n\n    /**\n     * Reposition the selection area to the right locations.\n     */\n    _adjustPos() {\n        const region = this._imageView.getSelectionRegion();\n\n        this._$selectionArea\n            .width(region.width)\n            .height(region.height)\n            .css({\n                left: region.left,\n                top: region.top\n            });\n\n        if (this._$imageDiffs) {\n            this._$imageDiffs.height(this._imageView.$el.height());\n        }\n    }\n});\n\n\n})();\n"],"mappings":"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"}
{"version":3,"file":"reviewDialogView.js","names":["BaseCommentView","Backbone","View","extend","tagName","thumbnailTemplate","events","editorTemplate","_","template","_DELETE_COMMENT_TEXT","initialize","$issueOpened","$editor","textEditor","_origExtraData","clone","model","get","_hookViews","remove","forEach","view","prototype","call","needsSave","inlineEditorView","isDirty","isEqual","save","options","Promise","resolve","reject","once","submit","attrs","render","$el","addClass","append","renderThumbnail","deleteCommentText","commentText","id","uniqueId","issueOpenedID","openAnIssueText","text","verifyIssueID","showVerify","RB","EnabledFeatures","issueVerification","verifyIssueText","CommentDialogView","_verifyIssueText","find","timesince","end","$","prop","change","set","isNew","_$issueVerify","requiresVerification","extraData","require_verification","$editFields","RichTextInlineEditorView","el","editIconClass","notifyUnchangedCompletion","multiline","textEditorOptions","bindRichText","attrName","listenTo","value","push","richText","_getRawValueFieldsName","_updateRawValue","renderText","stopListening","ReviewDialogCommentHook","each","hook","HookView","hookView","extension","appendTo","attributes","reviewRequest","formatText","newText","isHTMLEncoded","bugTrackerURL","_deleteComment","confirm","destroy","hasRawValue","rawValue","UserSession","instance","DiffCommentView","fileDiffID","interFileDiffID","diffQueue","queueLoad","fileDiff","interFileDiff","revisionText","interpolate","filename","fileDiffRevision","inteFfileDiffRevision","numLines","getNumLines","FileAttachmentCommentView","fileAttachment","diffAgainstFileAttachment","revision","revisionsStr","revision1","revision2","defaults","GeneralCommentView","ScreenshotCommentView","screenshot","displayName","getDisplayName","HeaderFooterCommentView","propertyName","richTextPropertyName","linkText","setLinkText","_$editorContainer","hide","_$linkContainer","show","openEditor","ev","startEdit","preventDefault","rawValues","ReviewDialogView","className","_$diffComments","_$fileAttachmentComments","_$generalComments","_$screenshotComments","_$dlg","_$buttons","_$spinner","_$shipIt","_commentViews","bindAll","_diffQueue","DiffFragmentQueueView","containerPrefix","reviewRequestPath","queueName","_diffCommentsCollection","ResourceCollection","DiffComment","parentResource","extraQueryData","_bodyTopView","_bodyBottomView","comment","_renderComment","_fileAttachmentCommentsCollection","FileAttachmentComment","_$lastGeneralComment","_generalCommentsCollection","GeneralComment","_screenshotCommentsCollection","ScreenshotComment","_defaultUseRichText","_queryData","_setTextTypeAttributes","reviewRequestEditor","incr","_publishButton","_super","close","decr","modalBox","trigger","html","addHeaderText","addFooterText","shipItText","markdownDocsURL","MANUAL_URL","markdownText","$hooksContainer","ReviewDialogHook","ready","data","then","_renderDialog","_handleEmptyReview","_loadComments","collections","generalComments","unshift","loadCollections","map","collection","fetchAll","loadFragments","all","err","alert","message","length","$container","fadeOut","complete","without","scrollTop","position","top","getExtents","$leftButtons","$rightButtons","buttons","val","attr","click","_onAddCommentClicked","_onDiscardClicked","_saveReview","container","boxID","title","stretchX","stretchY","keypress","e","stopPropagation","SplitButtonView","ariaMenuLabel","direction","alternatives","publishToOwnerOnly","publishAndArchive","createGeneralComment","undefined","add","$cancelButton","$discardButton","DraftReviewBannerView","hideAndReload","publish","madeChanges","funcQueue","clear","maybeSave","next","shipIt","saveFunc","catch","console","error","reviewBanner","start","forceTextType","includeTextTypes","_instance","create","assert","review","dialog","on"],"sources":["../../../../../static/rb/js/views/reviewDialogView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * Base class for displaying a comment in the review dialog.\n */\nconst BaseCommentView = Backbone.View.extend({\n    tagName: 'li',\n\n    thumbnailTemplate: null,\n\n    events: {\n        'click .delete-comment': '_deleteComment',\n    },\n\n    editorTemplate: _.template(dedent`\n        <div class=\"edit-fields\">\n         <div class=\"edit-field\">\n          <div class=\"comment-text-field\">\n           <label class=\"comment-label\" for=\"<%= id %>\">\n            <%- commentText %>\n            <a href=\"#\" role=\"button\" class=\"delete-comment\"\n               aria-label=\"<%- deleteCommentText %>\"\n               title=\"<%- deleteCommentText %>\"\n               ><span class=\"fa fa-trash-o\" aria-hidden=\"true\"></span></a>\n           </label>\n           <pre id=\"<%= id %>\" class=\"reviewtext rich-text\"\n                data-rich-text=\"true\"><%- text %></pre>\n          </div>\n         </div>\n         <div class=\"edit-field\">\n          <input class=\"issue-opened\" id=\"<%= issueOpenedID %>\"\n                 type=\"checkbox\">\n          <label for=\"<%= issueOpenedID %>\"><%- openAnIssueText %></label>\n          <% if (showVerify) { %>\n           <input class=\"issue-verify\" id=\"<%= verifyIssueID %>\"\n                  type=\"checkbox\">\n           <label for=\"<%= verifyIssueID %>\"><%- verifyIssueText %></label>\n          <% } %>\n         </div>\n        </div>\n    `),\n\n    _DELETE_COMMENT_TEXT: gettext('Are you sure you want to delete this comment?'),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.$issueOpened = null;\n        this.$editor = null;\n        this.textEditor = null;\n        this._origExtraData = _.clone(this.model.get('extraData'));\n\n        this._hookViews = [];\n    },\n\n    /**\n     * Remove the view.\n     */\n    remove() {\n        this._hookViews.forEach(view => view.remove());\n        this._hookViews = [];\n\n        Backbone.View.prototype.remove.call(this);\n    },\n\n    /**\n     * Return whether or not the comment needs to be saved.\n     *\n     * The comment will need to be saved if the inline editor is currently\n     * open.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the comment needs to be saved.\n     */\n    needsSave() {\n        return (this.inlineEditorView.isDirty() ||\n                !_.isEqual(this.model.get('extraData'), this._origExtraData));\n    },\n\n    /**\n     * Save the final state of the view.\n     *\n     * Saves the inline editor and notifies the caller when the model is\n     * synced.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the model save operation.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    save(options) {\n        /*\n         * If the inline editor needs to be saved, ask it to do so. This will\n         * call this.model.save(). If it does not, just save the model\n         * directly.\n         */\n        return new Promise((resolve, reject) => {\n            if (this.inlineEditorView.isDirty()) {\n                this.model.once('sync', () => resolve());\n                this.inlineEditorView.submit();\n            } else {\n                resolve(this.model.save(_.extend({\n                    attrs: ['forceTextType', 'includeTextTypes', 'extraData'],\n                }, options)));\n            }\n        });\n    },\n\n    /**\n     * Render the comment view.\n     *\n     * Returns:\n     *     BaseCommentView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el\n            .addClass('draft')\n            .append(this.renderThumbnail())\n            .append(this.editorTemplate({\n                deleteCommentText: gettext('Delete comment'),\n                commentText: gettext('Comment'),\n                id: _.uniqueId('draft_comment_'),\n                issueOpenedID: _.uniqueId('issue-opened'),\n                openAnIssueText: gettext('Open an Issue'),\n                text: this.model.get('text'),\n                verifyIssueID: _.uniqueId('issue-verify'),\n                showVerify: RB.EnabledFeatures.issueVerification,\n                verifyIssueText: RB.CommentDialogView._verifyIssueText,\n            }))\n            .find('time.timesince')\n                .timesince()\n            .end();\n\n        this.$issueOpened = this.$('.issue-opened')\n            .prop('checked', this.model.get('issueOpened'))\n            .change(() => {\n                this.model.set('issueOpened',\n                               this.$issueOpened.prop('checked'));\n\n                if (!this.model.isNew()) {\n                    /*\n                     * We don't save the issueOpened attribute for unsaved\n                     * models because the comment won't exist yet. If we did,\n                     * clicking cancel when creating a new comment wouldn't\n                     * delete the comment.\n                     */\n                    this.model.save({\n                        attrs: ['forceTextType', 'includeTextTypes',\n                                'issueOpened'],\n                    });\n                }\n            });\n\n        this._$issueVerify = this.$('.issue-verify')\n            .prop('checked', this.model.requiresVerification())\n            .change(() => {\n                const extraData = _.clone(this.model.get('extraData'));\n                extraData.require_verification =\n                    this._$issueVerify.prop('checked');\n                this.model.set('extraData', extraData);\n\n                if (!this.model.isNew()) {\n                    /*\n                     * We don't save the extraData attribute for unsaved models\n                     * because the comment won't exist yet. If we did, clicking\n                     * cancel when creating a new comment wouldn't delete the\n                     * comment.\n                     */\n                    this.model.save({\n                        attrs: ['forceTextType', 'includeTextTypes',\n                                'extra_data.require_verification'],\n                    });\n                }\n            });\n\n        const $editFields = this.$('.edit-fields');\n\n        this.$editor = this.$('pre.reviewtext');\n\n        this.inlineEditorView = new RB.RichTextInlineEditorView({\n            el: this.$editor,\n            editIconClass: 'rb-icon rb-icon-edit',\n            notifyUnchangedCompletion: true,\n            multiline: true,\n            textEditorOptions: {\n                bindRichText: {\n                    model: this.model,\n                    attrName: 'richText',\n                },\n            },\n        });\n        this.inlineEditorView.render();\n\n        this.textEditor = this.inlineEditorView.textEditor;\n\n        this.listenTo(this.inlineEditorView, 'complete', value => {\n            const attrs = ['forceTextType', 'includeTextTypes',\n                           'richText', 'text'];\n\n            if (this.model.isNew()) {\n                /*\n                 * If this is a new comment, we have to send whether or not an\n                 * issue was opened because toggling the issue opened checkbox\n                 * before it is completed won't save the status to the server.\n                 */\n                attrs.push('extra_data.require_verification', 'issueOpened');\n            }\n\n            this.model.set({\n                text: value,\n                richText: this.textEditor.richText,\n            });\n            this.model.save({\n                attrs: attrs,\n            });\n        });\n\n        this.listenTo(this.model, `change:${this._getRawValueFieldsName()}`,\n                      this._updateRawValue);\n        this._updateRawValue();\n\n        this.listenTo(this.model, 'saved', this.renderText);\n        this.renderText();\n\n        this.listenTo(this.model, 'destroying',\n                      () => this.stopListening(this.model));\n\n        RB.ReviewDialogCommentHook.each(hook => {\n            const HookView = hook.get('viewType');\n            const hookView = new HookView({\n                extension: hook.get('extension'),\n                model: this.model,\n            });\n\n            this._hookViews.push(hookView);\n\n            $('<div class=\"edit-field\"/>')\n                .append(hookView.$el)\n                .appendTo($editFields);\n            hookView.render();\n        });\n\n        return this;\n    },\n\n    /**\n     * Render the thumbnail for this comment.\n     *\n     * Returns:\n     *     jQuery:\n     *     The rendered thumbnail element.\n     */\n    renderThumbnail() {\n        if (this.thumbnailTemplate === null) {\n            return null;\n        }\n\n        return $(this.thumbnailTemplate(this.model.attributes));\n    },\n\n    /**\n     * Render the text for this comment.\n     */\n    renderText() {\n        const reviewRequest = this.model.get('parentObject').get('parentObject');\n\n        if (this.$editor) {\n            RB.formatText(this.$editor, {\n                newText: this.model.get('text'),\n                richText: this.model.get('richText'),\n                isHTMLEncoded: true,\n                bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n            });\n        }\n    },\n\n    /**\n     * Delete the comment associated with the model.\n     */\n    _deleteComment() {\n        if (confirm(this._DELETE_COMMENT_TEXT)) {\n            this.model.destroy();\n        }\n    },\n\n    /**\n     * Update the stored raw value of the comment text.\n     *\n     * This updates the raw value stored in the inline editor as a result of a\n     * change to the value in the model.\n     */\n    _updateRawValue() {\n        if (this.$editor) {\n            this.inlineEditorView.options.hasRawValue = true;\n            this.inlineEditorView.options.rawValue =\n                this.model.get(this._getRawValueFieldsName()).text;\n        }\n    },\n\n    /**\n     * Return the field name for the raw value.\n     *\n     * Returns:\n     *     string:\n     *     The field name to use, based on the whether the user wants to use\n     *     Markdown or not.\n     */\n    _getRawValueFieldsName() {\n        return RB.UserSession.instance.get('defaultUseRichText')\n               ? 'markdownTextFields'\n               : 'rawTextFields';\n    },\n});\n\n\n/**\n * Displays a view for diff comments.\n */\nconst DiffCommentView = BaseCommentView.extend({\n    thumbnailTemplate: _.template(dedent`\n        <div class=\"review-dialog-comment-diff\"\n             id=\"review_draft_comment_container_<%= id %>\">\n         <table class=\"sidebyside loading\">\n          <thead>\n           <tr>\n            <th class=\"filename\"><%- revisionText %></th>\n           </tr>\n          </thead>\n          <tbody>\n           <% for (var i = 0; i < numLines; i++) { %>\n            <tr><td><pre>&nbsp;</pre></td></tr>\n           <% } %>\n          </tbody>\n         </table>\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     diffQueue (RB.DiffFragmentQueueView):\n     *         The view that handles loading diff fragments.\n     */\n    initialize(options) {\n        this.options = options;\n        BaseCommentView.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Render the comment view.\n     *\n     * After rendering, this will queue up a load of the diff fragment\n     * to display. The view will show a spinner until the fragment has\n     * loaded.\n     *\n     * Returns:\n     *     DiffCommentView:\n     *     This object, for chaining.\n     */\n    render() {\n        BaseCommentView.prototype.render.call(this);\n\n        const fileDiffID = this.model.get('fileDiffID');\n        const interFileDiffID = this.model.get('interFileDiffID');\n\n        this.options.diffQueue.queueLoad(\n            this.model.id,\n            interFileDiffID ? fileDiffID + '-' + interFileDiffID\n                            : fileDiffID);\n\n        return this;\n    },\n\n    /**\n     * Render the thumbnail.\n     *\n     * Returns:\n     *     jQuery:\n     *     The rendered thumbnail element.\n     */\n    renderThumbnail() {\n        const fileDiff = this.model.get('fileDiff');\n        const interFileDiff = this.model.get('interFileDiff');\n        let revisionText;\n\n        if (interFileDiff) {\n            revisionText = interpolate(\n                gettext('%(filename)s (Diff revisions %(fileDiffRevision)s - %(interFileDiffRevision)s)'),\n                {\n                    filename: fileDiff.get('destFilename'),\n                    fileDiffRevision: fileDiff.get('sourceRevision'),\n                    inteFfileDiffRevision: interFileDiff.get('sourceRevision'),\n                },\n                true);\n        } else {\n            revisionText = interpolate(\n                gettext('%(filename)s (Diff revision %(fileDiffRevision)s)'),\n                {\n                    filename: fileDiff.get('destFilename'),\n                    fileDiffRevision: fileDiff.get('sourceRevision'),\n                },\n                true);\n        }\n\n        return $(this.thumbnailTemplate({\n            id: this.model.get('id'),\n            numLines: this.model.getNumLines(),\n            revisionText: revisionText,\n        }));\n    },\n});\n\n\n/**\n * Displays a view for file attachment comments.\n */\nconst FileAttachmentCommentView = BaseCommentView.extend({\n    thumbnailTemplate: _.template(dedent`\n        <div class=\"file-attachment\">\n         <span class=\"filename\">\n          <a href=\"<%- reviewURL %>\"><%- linkText %></a>\n         </span>\n         <span class=\"diffrevision\"><%- revisionsStr %></span>\n         <div class=\"thumbnail\"><%= thumbnailHTML %></div>\n        </div>\n    `),\n\n    /**\n     * Render the thumbnail.\n     *\n     * Returns:\n     *     jQuery:\n     *     The rendered thumbnail element.\n     */\n    renderThumbnail() {\n        const fileAttachment = this.model.get('fileAttachment');\n        const diffAgainstFileAttachment =\n            this.model.get('diffAgainstFileAttachment');\n        const revision = fileAttachment.get('revision');\n        let revisionsStr;\n\n        if (!revision) {\n            /* This predates having a revision. Don't show anything. */\n            revisionsStr = '';\n        } else if (diffAgainstFileAttachment) {\n            revisionsStr = interpolate(\n                gettext('(Revisions %(revision1)s - %(revision2)s)'),\n                {\n                    revision1: diffAgainstFileAttachment.get('revision'),\n                    revision2: revision\n                },\n                true);\n        } else {\n            revisionsStr = interpolate(gettext('(Revision %s)'), [revision]);\n        }\n\n        return $(this.thumbnailTemplate(_.defaults({\n            revisionsStr: revisionsStr\n        }, this.model.attributes)));\n    },\n});\n\n\n/**\n * Displays a view for general comments.\n */\nconst GeneralCommentView = BaseCommentView.extend({\n    thumbnailTemplate: null,\n});\n\n\n/**\n * Displays a view for screenshot comments.\n */\nconst ScreenshotCommentView = BaseCommentView.extend({\n    thumbnailTemplate: _.template(dedent`\n        <div class=\"screenshot\">\n         <span class=\"filename\">\n          <a href=\"<%- screenshot.reviewURL %>\"><%- displayName %></a>\n         </span>\n         <img src=\"<%= thumbnailURL %>\" width=\"<%= width %>\"\n              height=\"<%= height %>\" alt=\"<%- displayName %>\" />\n        </div>\n    `),\n\n    /**\n     * Render the thumbnail.\n     *\n     * Returns:\n     *     jQuery:\n     *     The rendered thumbnail element.\n     */\n    renderThumbnail() {\n        const screenshot = this.model.get('screenshot');\n\n        return $(this.thumbnailTemplate(_.defaults({\n            screenshot: screenshot.attributes,\n            displayName: screenshot.getDisplayName()\n        }, this.model.attributes)));\n    },\n});\n\n\n/**\n * The header or footer for a review.\n */\nconst HeaderFooterCommentView = Backbone.View.extend({\n    tagName: 'li',\n\n    editorTemplate: _.template(dedent`\n        <div class=\"edit-fields\">\n         <div class=\"edit-field\">\n          <div class=\"add-link-container\">\n           <a href=\"#\" class=\"add-link\"><%- linkText %></a>\n          </div>\n          <div class=\"comment-text-field\">\n           <label for=\"<%= id %>\" class=\"comment-label\">\n            <%- commentText %>\n           </label>\n           <pre id=\"<%= id %>\" class=\"reviewtext rich-text\"\n                data-rich-text=\"true\"><%- text %></pre>\n          </div>\n         </div>\n        </div>\n    `),\n\n    events: {\n        'click .add-link': 'openEditor',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     propertyName (string):\n     *         The property name to modify (either ``bodyTop`` or\n     *         ``bodyBottom`)).\n     *\n     *     richTextPropertyName (string):\n     *         The property name of the rich text field corresponding to the\n     *         ``propertyName``.\n     *\n     *     linkText (string):\n     *         The text to show in the \"add\" link.\n     *\n     *     commentText (string):\n     *         The text to show in the label for the comment field.\n     */\n    initialize(options) {\n        this.propertyName = options.propertyName;\n        this.richTextPropertyName = options.richTextPropertyName;\n        this.linkText = options.linkText;\n        this.commentText = options.commentText;\n\n        this.$editor = null;\n        this.textEditor = null;\n    },\n\n    /**\n     * Set the text of the link.\n     *\n     * Args:\n     *     linkText (string):\n     *         The text to show in the \"add\" link.\n     */\n    setLinkText(linkText) {\n        this.$('.add-link').text(linkText);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     HeaderFooterCommentView:\n     *     This object, for chaining.\n     */\n    render() {\n        const text = this.model.get(this.propertyName);\n\n        this.$el\n            .addClass('draft')\n            .append(this.editorTemplate({\n                commentText: this.commentText,\n                id: this.propertyName,\n                linkText: this.linkText,\n                text: text || '',\n            }))\n            .find('time.timesince')\n                .timesince()\n            .end();\n\n\n        this.$editor = this.$('pre.reviewtext');\n\n        this.inlineEditorView = new RB.RichTextInlineEditorView({\n            el: this.$editor,\n            editIconClass: 'rb-icon rb-icon-edit',\n            notifyUnchangedCompletion: true,\n            multiline: true,\n            textEditorOptions: {\n                bindRichText: {\n                    model: this.model,\n                    attrName: this.richTextPropertyName,\n                },\n            },\n        });\n        this.inlineEditorView.render();\n\n        this.textEditor = this.inlineEditorView.textEditor;\n\n        this.listenTo(this.inlineEditorView, 'complete', value => {\n            this.model.set(this.propertyName, value);\n            this.model.set(this.richTextPropertyName,\n                           this.textEditor.richText);\n            this.model.save({\n                attrs: [this.propertyName, this.richTextPropertyName,\n                        'forceTextType', 'includeTextTypes'],\n            });\n        });\n        this.listenTo(this.inlineEditorView, 'cancel', () => {\n            if (!this.model.get(this.propertyName)) {\n                this._$editorContainer.hide();\n                this._$linkContainer.show();\n            }\n        });\n\n        this._$editorContainer = this.$('.comment-text-field');\n        this._$linkContainer = this.$('.add-link-container');\n\n        this.listenTo(this.model, `change:${this._getRawValueFieldsName()}`,\n                      this._updateRawValue);\n        this._updateRawValue();\n\n        this.listenTo(this.model, 'saved', this.renderText);\n        this.renderText();\n    },\n\n    /**\n     * Render the text for this comment.\n     */\n    renderText() {\n        if (this.$editor) {\n            const text = this.model.get(this.propertyName);\n\n            if (text) {\n                const reviewRequest = this.model.get('parentObject');\n\n                this._$editorContainer.show();\n                this._$linkContainer.hide();\n                RB.formatText(this.$editor, {\n                    newText: text,\n                    richText: this.model.get(this.richTextPropertyName),\n                    isHTMLEncoded: true,\n                    bugTrackerURL: reviewRequest.get('bugTrackerURL')\n                });\n            } else {\n                this._$editorContainer.hide();\n                this._$linkContainer.show();\n            }\n        }\n    },\n\n    /**\n     * Return whether or not the comment needs to be saved.\n     *\n     * The comment will need to be saved if the inline editor is currently\n     * open.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the comment needs to be saved.\n     */\n    needsSave() {\n        return this.inlineEditorView.isDirty();\n    },\n\n    /**\n     * Save the final state of the view.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    save() {\n        return new Promise((resolve, reject) => {\n            this.model.once('sync', () => resolve());\n            this.inlineEditorView.submit();\n        });\n    },\n\n    /**\n     * Open the editor.\n     *\n     * This is used for the 'Add ...' link handler, as well as for the default\n     * state of the dialog when there are no comments.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the action.\n     *\n     * Returns:\n     *     boolean:\n     *     false, always.\n     */\n    openEditor(ev) {\n        this._$linkContainer.hide();\n        this._$editorContainer.show();\n\n        this.inlineEditorView.startEdit();\n\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        return false;\n    },\n\n    /**\n     * Delete the comment.\n     *\n     * This is a no-op, since headers and footers can't be deleted.\n     */\n    _deleteComment() {\n    },\n\n    /**\n     * Update the stored raw value of the comment text.\n     *\n     * This updates the raw value stored in the inline editor as a result of a\n     * change to the value in the model.\n     */\n    _updateRawValue() {\n        if (this.$editor) {\n            const rawValues = this.model.get(this._getRawValueFieldsName());\n\n            this.inlineEditorView.options.hasRawValue = true;\n            this.inlineEditorView.options.rawValue =\n                rawValues[this.propertyName];\n        }\n    },\n\n    /**\n     * Return the field name for the raw value.\n     *\n     * Returns:\n     *     string:\n     *     The field name to use, based on the whether the user wants to use\n     *     Markdown or not.\n     */\n    _getRawValueFieldsName() {\n        return RB.UserSession.instance.get('defaultUseRichText')\n               ? 'markdownTextFields'\n               : 'rawTextFields';\n    },\n});\n\n\n/**\n * Creates a dialog for modifying a draft review.\n *\n * This provides editing capabilities for creating or modifying a new\n * review. The list of comments are retrieved from the server, providing\n * context for the comments.\n */\nRB.ReviewDialogView = Backbone.View.extend({\n    id: 'review-form-comments',\n    className: 'review',\n\n    template: _.template(dedent`\n        <div class=\"edit-field\">\n         <input id=\"id_shipit\" type=\"checkbox\" />\n         <label for=\"id_shipit\"><%- shipItText %></label>\n        </div>\n        <div class=\"review-dialog-hooks-container\"></div>\n        <div class=\"edit-field body-top\"></div>\n        <ol id=\"review-dialog-body-top-comments\" class=\"review-comments\"></ol>\n        <ol id=\"review-dialog-general-comments\" class=\"review-comments\"></ol>\n        <ol id=\"review-dialog-screenshot-comments\" class=\"review-comments\"></ol>\n        <ol id=\"review-dialog-file-attachment-comments\" class=\"review-comments\"></ol>\n        <ol id=\"review-dialog-diff-comments\" class=\"review-comments\"></ol>\n        <ol id=\"review-dialog-body-bottom-comments\" class=\"review-comments\"></ol>\n        <div class=\"spinner\"><span class=\"fa fa-spinner fa-pulse\"></span></div>\n        <div class=\"edit-field body-bottom\"></div>\n    `),\n\n    /**\n     * Initialize the review dialog.\n     *\n     * Args:\n     *     container (string, optional):\n     *         The selector for a container element for the review dialog.\n     *\n     *     options (object):\n     *         Options for the view.\n     *\n     *     reviewRequestEditor (RB.ReviewRequestEditor):\n     *         The review request editor.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$diffComments = $();\n        this._$fileAttachmentComments = $();\n        this._$generalComments = $();\n        this._$screenshotComments = $();\n        this._$dlg = null;\n        this._$buttons = null;\n        this._$spinner = null;\n        this._$shipIt = null;\n\n        this._commentViews = [];\n        this._hookViews = [];\n\n        _.bindAll(this, '_onAddCommentClicked');\n\n        const reviewRequest = this.model.get('parentObject');\n        this._diffQueue = new RB.DiffFragmentQueueView({\n            containerPrefix: 'review_draft_comment_container',\n            reviewRequestPath: reviewRequest.get('reviewURL'),\n            queueName: 'review_draft_diff_comments',\n        });\n\n        this._diffCommentsCollection = new RB.ResourceCollection([], {\n            model: RB.DiffComment,\n            parentResource: this.model,\n            extraQueryData: {\n                'order-by': 'filediff,first_line',\n            },\n        });\n\n        this._bodyTopView = new HeaderFooterCommentView({\n            model: this.model,\n            propertyName: 'bodyTop',\n            richTextPropertyName: 'bodyTopRichText',\n            linkText: gettext('Add header'),\n            commentText: gettext('Header'),\n        });\n\n        this._bodyBottomView = new HeaderFooterCommentView({\n            model: this.model,\n            propertyName: 'bodyBottom',\n            richTextPropertyName: 'bodyBottomRichText',\n            linkText: gettext('Add footer'),\n            commentText: gettext('Footer'),\n        });\n\n        this.listenTo(this._diffCommentsCollection, 'add', comment => {\n            const view = new DiffCommentView({\n                model: comment,\n                diffQueue: this._diffQueue,\n            });\n            this._renderComment(view, this._$diffComments);\n        });\n\n        this._fileAttachmentCommentsCollection = new RB.ResourceCollection([], {\n            model: RB.FileAttachmentComment,\n            parentResource: this.model,\n        });\n\n        this.listenTo(this._fileAttachmentCommentsCollection, 'add',\n                      comment => {\n            const view = new FileAttachmentCommentView({ model: comment });\n            this._renderComment(view, this._$fileAttachmentComments);\n        });\n\n        this._$lastGeneralComment = null;\n\n        this._generalCommentsCollection = new RB.ResourceCollection([], {\n            model: RB.GeneralComment,\n            parentResource: this.model,\n        });\n\n        this.listenTo(this._generalCommentsCollection, 'add', comment => {\n            const view = new GeneralCommentView({ model: comment });\n            this._renderComment(view, this._$generalComments);\n        });\n\n        this._screenshotCommentsCollection = new RB.ResourceCollection([], {\n            model: RB.ScreenshotComment,\n            parentResource: this.model,\n        });\n\n        this.listenTo(this._screenshotCommentsCollection, 'add', comment => {\n            const view = new ScreenshotCommentView({ model: comment });\n            this._renderComment(view, this._$screenshotComments);\n        });\n\n        this._defaultUseRichText =\n            RB.UserSession.instance.get('defaultUseRichText');\n\n        this._queryData = {\n            'force-text-type': 'html'\n        };\n\n        if (this._defaultUseRichText) {\n            this._queryData['include-text-types'] = 'raw,markdown';\n        } else {\n            this._queryData['include-text-types'] = 'raw';\n        }\n\n        this._setTextTypeAttributes(this.model);\n\n        this.options.reviewRequestEditor.incr('editCount');\n    },\n\n    /**\n     * Remove the dialog from the DOM.\n     *\n     * This will remove all the extension hook views from the dialog,\n     * and then remove the dialog itself.\n     */\n    remove() {\n        if (this._publishButton) {\n            this._publishButton.remove();\n            this._publishButton = null;\n        }\n\n        this._hookViews.forEach(view => view.remove());\n        this._hookViews = [];\n\n        _super(this).remove.call(this);\n    },\n\n    /**\n     * Close the review dialog.\n     *\n     * The dialog will be removed from the screen, and the \"closed\"\n     * event will be triggered.\n     */\n    close() {\n        this.options.reviewRequestEditor.decr('editCount');\n        this._$dlg.modalBox('destroy');\n        this.trigger('closed');\n\n        this.remove();\n    },\n\n    /**\n     * Render the dialog.\n     *\n     * The dialog will be shown on the screen, and the comments from\n     * the server will begin loading and rendering.\n     *\n     * Returns:\n     *     RB.ReviewDialogView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template({\n            addHeaderText: gettext('Add header'),\n            addFooterText: gettext('Add footer'),\n            shipItText: gettext('Ship It'),\n            markdownDocsURL: MANUAL_URL + 'users/markdown/',\n            markdownText: gettext('Markdown Reference'),\n        }));\n\n        this._$diffComments = this.$('#review-dialog-diff-comments');\n        this._$fileAttachmentComments =\n            this.$('#review-dialog-file-attachment-comments');\n        this._$generalComments = this.$('#review-dialog-general-comments');\n        this._$screenshotComments =\n            this.$('#review-dialog-screenshot-comments');\n        this._$spinner = this.$('.spinner');\n        this._$shipIt = this.$('#id_shipit');\n\n        const $hooksContainer = this.$('.review-dialog-hooks-container');\n\n        RB.ReviewDialogHook.each(hook => {\n            const HookView = hook.get('viewType');\n            const hookView = new HookView({\n                extension: hook.get('extension'),\n                model: this.model,\n            });\n\n            this._hookViews.push(hookView);\n\n            $hooksContainer.append(hookView.$el);\n            hookView.render();\n        });\n\n        this._bodyTopView.$el.appendTo(\n            this.$('#review-dialog-body-top-comments'));\n        this._bodyBottomView.$el.appendTo(\n            this.$('#review-dialog-body-bottom-comments'));\n\n        /*\n         * Even if the model is already loaded, we may not have the right text\n         * type data. Force it to reload.\n         */\n        this.model.set('loaded', false);\n\n        this.model.ready({ data: this._queryData })\n            .then(() => {\n                this._renderDialog();\n                this._bodyTopView.render();\n                this._bodyBottomView.render();\n\n                if (this.model.isNew() || this.model.get('bodyTop') === '') {\n                    this._bodyTopView.openEditor();\n                }\n\n                if (this.model.isNew()) {\n                    this._$spinner.remove();\n                    this._$spinner = null;\n\n                    this._handleEmptyReview();\n                    this.trigger('loadCommentsDone');\n                } else {\n                    this._$shipIt.prop('checked', this.model.get('shipIt'));\n                    this._loadComments();\n                }\n\n                this.listenTo(this.model, 'change:bodyBottom',\n                              this._handleEmptyReview);\n            });\n\n        return this;\n    },\n\n    /**\n     * Load the comments from the server.\n     *\n     * This will begin chaining together the loads of each set of\n     * comment types. Each loaded comment will be rendered to the\n     * dialog once loaded.\n     */\n    async _loadComments() {\n        const collections = [\n            this._screenshotCommentsCollection,\n            this._fileAttachmentCommentsCollection,\n            this._diffCommentsCollection\n        ];\n\n        if (RB.EnabledFeatures.generalComments) {\n            /*\n             * Prepend the General Comments so they're fetched and shown\n             * first.\n             */\n            collections.unshift(this._generalCommentsCollection);\n        }\n\n        const loadCollections = collections.map(async collection => {\n            await collection.fetchAll({ data: this._queryData });\n\n            if (collection === this._diffCommentsCollection) {\n                this._diffQueue.loadFragments();\n            }\n        });\n\n        try {\n            await Promise.all(loadCollections);\n\n            this._$spinner.remove();\n            this._$spinner = null;\n\n            this._handleEmptyReview();\n\n            this.trigger('loadCommentsDone');\n        } catch(err) {\n            alert(err.message); // TODO: provide better output.\n        }\n    },\n\n    /**\n     * Properly set the view when the review is empty.\n     */\n    _handleEmptyReview() {\n        /*\n         * We only display the bottom textarea if we have comments or the user\n         * has previously set the bottom textarea -- we don't want the user to\n         * not be able to remove their text.\n         */\n        if (this._commentViews.length === 0 && !this.model.get('bodyBottom')) {\n            this._bodyBottomView.$el.hide();\n            this._bodyTopView.setLinkText(gettext('Add text'));\n        }\n    },\n\n    /**\n     * Render a comment to the dialog.\n     *\n     * Args:\n     *     view (BaseCommentView):\n     *         The view to render.\n     *\n     *     $container (jQuery):\n     *         The container to add the view to.\n     */\n    _renderComment(view, $container) {\n        this._setTextTypeAttributes(view.model);\n\n        this._commentViews.push(view);\n\n        this.listenTo(view.model, 'destroyed', () => {\n            view.$el.fadeOut({\n                complete: () => {\n                    view.remove();\n                    this._handleEmptyReview();\n                },\n            });\n\n            this._commentViews = _.without(this._commentViews, view);\n        });\n\n        $container.append(view.$el);\n        view.render();\n\n        this._$dlg.scrollTop(view.$el.position().top +\n                             this._$dlg.getExtents('p', 't'));\n    },\n\n    /**\n     * Render the dialog.\n     *\n     * This will create and render a dialog to the screen, adding\n     * this view's element as the child.\n     */\n    _renderDialog() {\n        const $leftButtons = $('<div class=\"review-dialog-buttons-left\"/>');\n        const $rightButtons = $('<div class=\"review-dialog-buttons-right\"/>');\n        const buttons = [$leftButtons, $rightButtons];\n\n        if (RB.EnabledFeatures.generalComments) {\n            $leftButtons.append(\n                $('<input type=\"button\" />')\n                    .val(gettext('Add General Comment'))\n                    .attr('title',\n                          gettext('Add a new general comment to the review'))\n                    .click(this._onAddCommentClicked)\n            );\n        }\n\n        $rightButtons.append(\n            $('<div id=\"review-form-publish-split-btn-container\" />'));\n\n        $rightButtons.append(\n            $('<input type=\"button\"/>')\n                .val(gettext('Discard Review'))\n                .click(() => this._onDiscardClicked()));\n\n        $rightButtons.append(\n            $('<input type=\"button\"/>')\n                .val(gettext('Close'))\n                .click(() => {\n                    this._saveReview(false);\n                    return false;\n                }));\n\n        const reviewRequest = this.model.get('parentObject');\n\n        this._$dlg = $('<div/>')\n            .attr('id', 'review-form')\n            .append(this.$el)\n            .modalBox({\n                container: this.options.container || 'body',\n                boxID: 'review-form-modalbox',\n                title: interpolate(\n                    gettext('Review for: %s'),\n                    [reviewRequest.get('summary')]),\n                stretchX: true,\n                stretchY: true,\n                buttons: buttons,\n            })\n            .keypress(e => e.stopPropagation())\n            .attr('scrollTop', 0)\n            .trigger('ready');\n\n        /* Must be done after the dialog is rendered. */\n\n        this._publishButton = new RB.SplitButtonView({\n            el: $('#review-form-publish-split-btn-container'),\n            text: gettext('Publish Review'),\n            ariaMenuLabel: gettext('More publishing options'),\n            click: () => {\n                this._saveReview(true);\n                return false;\n            },\n            direction: 'up',\n            alternatives: [\n                {\n                    text: gettext('... and only e-mail the owner'),\n                    click: () => {\n                        this._saveReview(true, {\n                            publishToOwnerOnly: true\n                        });\n                        this.close();\n                        return false;\n                    },\n                },\n                {\n                    text: gettext('... and archive the review request'),\n                    click: () => {\n                        this._saveReview(true, {\n                            publishAndArchive: true,\n                        });\n                        this.close();\n                        return false;\n                    },\n                }\n            ],\n        });\n\n        this._publishButton.render();\n\n        this._$buttons = this._$dlg.modalBox('buttons');\n    },\n\n    /**\n     * Handle a click on the \"Add Comment\" button.\n     *\n     * Returns:\n     *     boolean:\n     *     This always returns false to indicate that the dialog should not\n     *     close.\n     */\n    _onAddCommentClicked() {\n        const comment = this.model.createGeneralComment(\n            undefined,\n            RB.UserSession.instance.get('commentsOpenAnIssue'));\n\n        this._generalCommentsCollection.add(comment);\n        this._bodyBottomView.$el.show();\n        this._commentViews[this._commentViews.length - 1]\n            .inlineEditorView.startEdit();\n\n        return false;\n    },\n\n    /**\n     * Handle a click on the \"Discard Review\" button.\n     *\n     * Prompts the user to confirm that they want the review discarded.\n     * If they confirm, the review will be discarded.\n     *\n     * Returns:\n     *     boolean:\n     *     This always returns false to indicate that the dialog should not\n     *     close.\n     */\n    _onDiscardClicked() {\n        const $cancelButton = $('<input type=\"button\">')\n            .val(gettext('Cancel'));\n\n        const $discardButton = $('<input type=\"button\">')\n            .val(gettext('Discard'))\n            .click(async () => {\n                this.close();\n                await this.model.destroy();\n                RB.DraftReviewBannerView.instance.hideAndReload();\n            });\n\n        $('<p/>')\n            .text(gettext('If you discard this review, all related comments will be permanently deleted.'))\n            .modalBox({\n                title: gettext('Are you sure you want to discard this review?'),\n                buttons: [\n                    $cancelButton,\n                    $discardButton,\n                ],\n            });\n\n        return false;\n    },\n\n    /**\n     * Save the review.\n     *\n     * First, this loops over all the comment editors and saves any which are\n     * still in the editing phase.\n     *\n     * Args:\n     *     publish (boolean):\n     *         Whether the review should be published.\n     *\n     *     options (object):\n     *         Options for the model save operation.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    _saveReview(publish, options={}) {\n        if (publish && options.publishToOwnerOnly) {\n            this.model.set('publishToOwnerOnly', true);\n        }\n\n        if (publish && options.publishAndArchive) {\n            this.model.set('publishAndArchive', true);\n        }\n\n        this._$buttons.prop('disabled');\n\n        let madeChanges = false;\n        $.funcQueue('reviewForm').clear();\n\n        function maybeSave(view) {\n            if (view.needsSave()) {\n                $.funcQueue('reviewForm').add(() => {\n                    madeChanges = true;\n                    view.save()\n                        .then(() => $.funcQueue('reviewForm').next());\n                });\n            }\n        }\n\n        maybeSave(this._bodyTopView);\n        maybeSave(this._bodyBottomView);\n        this._commentViews.forEach(view => maybeSave(view));\n\n        $.funcQueue('reviewForm').add(() => {\n            const shipIt = this._$shipIt.prop('checked');\n            const saveFunc = publish ? this.model.publish : this.model.save;\n\n            if (this.model.get('public') === publish &&\n                this.model.get('shipIt') === shipIt) {\n                $.funcQueue('reviewForm').next();\n            } else {\n                madeChanges = true;\n                this.model.set({\n                    shipIt: shipIt,\n                });\n\n                saveFunc.call(this.model, {\n                    attrs: [\n                        'forceTextType',\n                        'includeTextTypes',\n                        'public',\n                        'publishAndArchive',\n                        'publishToOwnerOnly',\n                        'shipIt',\n                    ]})\n                    .then(() => $.funcQueue('reviewForm').next())\n                    .catch(err => {\n                        console.error('Failed to save review', err);\n                    });\n            }\n        });\n\n        $.funcQueue('reviewForm').add(() => {\n            const reviewBanner = RB.DraftReviewBannerView.instance;\n\n            this.close();\n\n            if (reviewBanner) {\n                if (publish) {\n                    reviewBanner.hideAndReload();\n                } else if (this.model.isNew() && !madeChanges) {\n                    reviewBanner.hide();\n                } else {\n                    reviewBanner.show();\n                }\n            }\n\n            $.funcQueue('reviewForm').next();\n        });\n\n        return new Promise((resolve, reject) => {\n            $.funcQueue('reviewForm').add(() => resolve());\n            $.funcQueue('reviewForm').start();\n        });\n    },\n\n    /**\n     * Set the text attributes on a model for forcing and including types.\n     *\n     * Args:\n     *     model (Backbone.Model):\n     *         The model to set the text type attributes on.\n     */\n    _setTextTypeAttributes(model) {\n        model.set({\n            forceTextType: 'html',\n            includeTextTypes: this._defaultUseRichText\n                              ? 'raw,markdown' : 'raw'\n        });\n    },\n}, {\n    /*\n     * Add some useful singletons to ReviewDialogView for managing the\n     * review dialog.\n     */\n\n    _instance: null,\n\n    /**\n     * Create a ReviewDialogView.\n     *\n     * Only one is allowed on the screen at any given time.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the dialog.\n     *\n     * Option Args:\n     *     container (jQuery):\n     *         The DOM container to attach the dialog to.\n     *\n     *     review (RB.Review):\n     *         The review to show in this dialog.\n     *\n     *     reviewRequestEditor (RB.ReviewRequestEditor):\n     *         The review request editor model.\n     */\n    create(options={}) {\n        console.assert(!RB.ReviewDialogView._instance,\n                       'A ReviewDialogView is already opened');\n        console.assert(options.review, 'A review must be specified');\n\n        const dialog = new RB.ReviewDialogView({\n            container: options.container,\n            model: options.review,\n            reviewRequestEditor: options.reviewRequestEditor,\n        });\n        RB.ReviewDialogView._instance = dialog;\n\n        dialog.render();\n\n        dialog.on('closed', () => {\n            RB.ReviewDialogView._instance = null;\n        });\n\n        return dialog;\n    },\n});\n\n\n})();\n"],"mappings":"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"}
{"version":3,"file":"diffViewerPageView.js","names":["RB","DiffViewerPageView","ReviewablePageView","extend","SCROLL_BACKWARD","SCROLL_FORWARD","ANCHOR_COMMENT","ANCHOR_FILE","ANCHOR_CHUNK","DIFF_SCROLLDOWN_AMOUNT","keyBindings","events","_","prototype","_fileEntryTemplate","template","anchorTemplate","initialize","options","call","_selectedAnchorIndex","_$window","$","window","_$anchors","_$controls","_$diffs","_diffReviewableViews","_diffFileIndexView","_highlightedChunk","_commitListView","listenTo","model","diffReviewables","_onDiffReviewableAdded","diffQueue","funcQueue","forEach","view","remove","children","clear","start","router","Backbone","Router","route","revision","queryStr","queryArgs","Djblets","parseQueryString","page","revisionRange","split","interdiffRevision","length","parseInt","baseCommitID","tipCommitID","loadDiffRevision","filenamePatterns","filenames","history","pushState","hashChange","root","get","silent","_setInitialURL","document","location","search","getLocationHash","off","cid","render","commits","isEmpty","commitListModel","DiffCommitList","historyDiff","commitHistoryDiff","set","_onCommitIntervalChanged","DiffCommitListView","el","find","showInterCommitDiffControls","DiffFileIndexView","collection","files","selectAnchorByName","_diffRevisionLabelView","DiffRevisionLabelView","_onRevisionSelected","numDiffs","_diffRevisionSelectorView","DiffRevisionSelectorView","_commentsHintView","DiffCommentsHintView","commentsHint","_paginationView1","PaginationView","pagination","partial","_onPageSelected","_paginationView2","bindClass","UserSession","instance","_chunkHighlighter","ChunkHighlighterView","$el","prependTo","removeClass","bindVisibility","on","throttleLayout","_onWindowResize","bind","each","diffReviewable","queueLoadDiff","add","fileDiffID","showDeleted","_renderFileDiff","prefix","html","getRenderedDiff","$container","parent","hide","innerHTML","elementName","next","diffReviewableView","DiffReviewableView","addDiff","push","show","name","line","selectAnchor","_updateAnchors","_highlightAnchor","_startAtAnchorName","$anchor","getElementsByName","urlSplit","anchorName","addClass","append","scroll","is","_navigate","anchor","attr","updateURLOnly","scrollAmount","DraftReviewBannerView","getHeight","scrollTop","offset","top","i","closest","highlight","$table","_getNextAnchor","dir","anchorTypes","hasClass","_selectPreviousFile","_selectNextFile","_selectPreviousDiff","_selectNextDiff","_selectPreviousComment","_selectNextComment","_recenterSelected","_createComment","chunkID","id","chunkElement","getElementById","lineElements","getElementsByTagName","beginLineNum","getAttribute","beginNode","cells","endLineNum","endNode","contains","createComment","_toggleWhitespaceOnlyChunks","toggleWhitespaceOnlyChunks","toggle","_toggleShowExtraWhitespace","toggleAttr","queryString","curRevision","curInterdiffRevision","undefined","baseURL","queryData","value","url","buildURL","navOptions","replace","trigger","navigate","file","newFile","filename","updateLayout","revisions","base","tip","KeyBindingsMixin"],"sources":["../../../../../../static/rb/js/pages/views/diffViewerPageView.es6.js"],"sourcesContent":["/**\n * Manages the diff viewer page.\n *\n * This provides functionality for the diff viewer page for managing the\n * loading and display of diffs, and all navigation around the diffs.\n */\nRB.DiffViewerPageView = RB.ReviewablePageView.extend({\n    SCROLL_BACKWARD: -1,\n    SCROLL_FORWARD: 1,\n\n    ANCHOR_COMMENT: 1,\n    ANCHOR_FILE: 2,\n    ANCHOR_CHUNK: 4,\n\n    DIFF_SCROLLDOWN_AMOUNT: 15,\n\n    keyBindings: {\n        'aAKP<m': '_selectPreviousFile',\n        'fFJN>': '_selectNextFile',\n        'sSkp,': '_selectPreviousDiff',\n        'dDjn.': '_selectNextDiff',\n        '[x': '_selectPreviousComment',\n        ']c': '_selectNextComment',\n        '\\x0d': '_recenterSelected',\n        'rR': '_createComment',\n    },\n\n    events: _.extend({\n        'click .toggle-whitespace-only-chunks': '_toggleWhitespaceOnlyChunks',\n        'click .toggle-show-whitespace': '_toggleShowExtraWhitespace',\n    }, RB.ReviewablePageView.prototype.events),\n\n    _fileEntryTemplate: _.template(dedent`\n        <div class=\"diff-container\">\n         <div class=\"diff-box\">\n          <table class=\"sidebyside loading <% if (newFile) { %>newfile<% } %>\"\n                 id=\"file_container_<%- id %>\">\n           <thead>\n            <tr class=\"filename-row\">\n             <th>\n              <span class=\"fa fa-spinner fa-pulse\"></span>\n              <%- filename %>\n             </th>\n            </tr>\n           </thead>\n          </table>\n         </div>\n        </div>\n    `),\n\n    /* Template for code line link anchor */\n    anchorTemplate: _.template(\n        '<a name=\"<%- anchorName %>\" class=\"highlight-anchor\"></a>'),\n\n    /**\n     * Initialize the diff viewer page.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     *  See Also:\n     *      :js:class:`RB.ReviewablePageView`:\n     *          For the option arguments this method takes.\n     */\n    initialize(options) {\n        RB.ReviewablePageView.prototype.initialize.call(this, options);\n\n        this._selectedAnchorIndex = -1;\n        this._$window = $(window);\n        this._$anchors = $();\n        this._$controls = null;\n        this._$diffs = null;\n        this._diffReviewableViews = [];\n        this._diffFileIndexView = null;\n        this._highlightedChunk = null;\n        this._commitListView = null;\n\n        /*\n         * Listen for the construction of added DiffReviewables.\n         *\n         * We'll queue up the loading and construction of a view when added.\n         * This will ultimately result in a RB.DiffReviewableView being\n         * constructed, once the data from the server is loaded.\n         */\n        this.listenTo(this.model.diffReviewables, 'add',\n                      this._onDiffReviewableAdded);\n\n        /*\n         * Listen for when we're started and finished populating the list\n         * of DiffReviewables. We'll use these events to clear and start the\n         * diff loading queue.\n         */\n        const diffQueue = $.funcQueue('diff_files');\n\n        this.listenTo(this.model.diffReviewables, 'populating', () => {\n            this._diffReviewableViews.forEach(view => view.remove());\n            this._diffReviewableViews = [];\n            this._$diffs.children('.diff-container').remove();\n            this._highlightedChunk = null;\n\n            diffQueue.clear();\n        });\n        this.listenTo(this.model.diffReviewables, 'populated',\n                      () => diffQueue.start());\n\n        this.router = new Backbone.Router();\n        this.router.route(\n            /^(\\d+(?:-\\d+)?)\\/?(\\?[^#]*)?/,\n            'revision',\n            (revision, queryStr) => {\n                const queryArgs = Djblets.parseQueryString(queryStr || '');\n                const page = queryArgs.page;\n                const revisionRange = revision.split('-', 2);\n\n                const interdiffRevision = (revisionRange.length === 2\n                                           ? parseInt(revisionRange[1], 10)\n                                           : null);\n\n                let baseCommitID = null;\n                let tipCommitID = null;\n\n                if (interdiffRevision === null) {\n                    baseCommitID = queryArgs['base-commit-id'] || null;\n                    tipCommitID = queryArgs['tip-commit-id'] || null;\n\n                    if (baseCommitID !== null) {\n                        baseCommitID = parseInt(baseCommitID, 10);\n                    }\n\n                    if (tipCommitID !== null) {\n                        tipCommitID = parseInt(tipCommitID, 10);\n                    }\n                }\n\n                this.model.loadDiffRevision({\n                    page: page ? parseInt(page, 10) : 1,\n                    filenamePatterns: queryArgs.filenames || null,\n                    revision: parseInt(revisionRange[0], 10),\n                    interdiffRevision: interdiffRevision,\n                    baseCommitID: baseCommitID,\n                    tipCommitID: tipCommitID,\n                });\n            });\n\n        /*\n         * Begin managing the URL history for the page, so that we can\n         * switch revisions and handle pagination while keeping the history\n         * clean and the URLs representative of the current state.\n         *\n         * Note that Backbone will attempt to convert the hash to part of\n         * the page URL, stripping away the \"#\". This will result in a\n         * URL pointing to an incorrect, possible non-existent diff revision.\n         *\n         * We work around that by saving the values for the hash and query\n         * string (up above), and by later replacing the current URL with a\n         * new one that, amongst other things, contains the hash present\n         * when the page was loaded.\n         */\n        Backbone.history.start({\n            pushState: true,\n            hashChange: false,\n            root: `${this.model.get('reviewRequest').get('reviewURL')}diff/`,\n            silent: true,\n        });\n\n        this._setInitialURL(document.location.search || '',\n                            RB.getLocationHash());\n    },\n\n    /**\n     * Remove the view from the page.\n     */\n    remove() {\n        RB.ReviewablePageView.prototype.remove.call(this);\n\n        this._$window.off(`resize.${this.cid}`);\n        this._diffFileIndexView.remove();\n\n        if (this._commitListView) {\n            this._commitListView.remove();\n        }\n    },\n\n    /**\n     * Render the page and begins loading all diffs.\n     *\n     * Returns:\n     *     RB.DiffViewerPageView:\n     *     This instance, for chaining.\n     */\n    render() {\n        RB.ReviewablePageView.prototype.render.call(this);\n\n        this._$controls = $('#view_controls');\n\n        if (!this.model.commits.isEmpty()) {\n            const commitListModel = new RB.DiffCommitList({\n                commits: this.model.commits,\n                historyDiff: this.model.commitHistoryDiff,\n                baseCommitID: this.model.revision.get('baseCommitID'),\n                tipCommitID: this.model.revision.get('tipCommitID'),\n            });\n\n            this.listenTo(\n                this.model.revision,\n                'change:baseCommitID change:tipCommitID',\n                model => commitListModel.set({\n                    baseCommitID: model.get('baseCommitID'),\n                    tipCommitID: model.get('tipCommitID'),\n                }));\n\n            this.listenTo(\n                commitListModel,\n                'change:baseCommitID change:tipCommitID',\n                this._onCommitIntervalChanged);\n\n            this._commitListView = new RB.DiffCommitListView({\n                el: $('#diff_commit_list').find('.commit-list-container'),\n                model: commitListModel,\n                showInterCommitDiffControls: true,\n            });\n            this._commitListView.render();\n        }\n\n        this._diffFileIndexView = new RB.DiffFileIndexView({\n            el: $('#diff_index').find('.diff-index-container'),\n            collection: this.model.files,\n        });\n\n        this._diffFileIndexView.render();\n\n        this.listenTo(this._diffFileIndexView, 'anchorClicked',\n                      this.selectAnchorByName);\n\n        this._diffRevisionLabelView = new RB.DiffRevisionLabelView({\n            el: $('#diff_revision_label'),\n            model: this.model.revision,\n        });\n        this._diffRevisionLabelView.render();\n\n        this.listenTo(this._diffRevisionLabelView, 'revisionSelected',\n                      this._onRevisionSelected);\n\n        /*\n         * Determine whether we need to show the revision selector. If there's\n         * only one revision, we don't need to add it.\n         */\n        const numDiffs = this.model.get('numDiffs');\n\n        if (numDiffs > 1) {\n            this._diffRevisionSelectorView = new RB.DiffRevisionSelectorView({\n                el: $('#diff_revision_selector'),\n                model: this.model.revision,\n                numDiffs: numDiffs,\n            });\n            this._diffRevisionSelectorView.render();\n\n            this.listenTo(this._diffRevisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n        }\n\n        this._commentsHintView = new RB.DiffCommentsHintView({\n            el: $('#diff_comments_hint'),\n            model: this.model.commentsHint,\n        });\n        this._commentsHintView.render();\n        this.listenTo(this._commentsHintView, 'revisionSelected',\n                      this._onRevisionSelected);\n\n        this._paginationView1 = new RB.PaginationView({\n            el: $('#pagination1'),\n            model: this.model.pagination,\n        });\n        this._paginationView1.render();\n        this.listenTo(this._paginationView1, 'pageSelected',\n                      _.partial(this._onPageSelected, false));\n\n        this._paginationView2 = new RB.PaginationView({\n            el: $('#pagination2'),\n            model: this.model.pagination,\n        });\n        this._paginationView2.render();\n        this.listenTo(this._paginationView2, 'pageSelected',\n                      _.partial(this._onPageSelected, true));\n\n        this._$diffs = $('#diffs')\n            .bindClass(RB.UserSession.instance,\n                       'diffsShowExtraWhitespace', 'ewhl');\n\n        this._chunkHighlighter = new RB.ChunkHighlighterView();\n        this._chunkHighlighter.render().$el.prependTo(this._$diffs);\n\n        $('#diff-details').removeClass('loading');\n        $('#download-diff-action').bindVisibility(this.model,\n                                                  'canDownloadDiff');\n\n        this._$window.on(`resize.${this.cid}`,\n                         _.throttleLayout(this._onWindowResize.bind(this)));\n\n        /*\n         * Begin creating any DiffReviewableViews needed for the page, and\n         * start loading their contents.\n         */\n        if (this.model.diffReviewables.length > 0) {\n            this.model.diffReviewables.each(\n                diffReviewable => this._onDiffReviewableAdded(diffReviewable));\n            $.funcQueue('diff_files').start();\n        }\n\n        return this;\n    },\n\n    /**\n     * Queue the loading of the corresponding diff.\n     *\n     * When the diff is loaded, it will be placed into the appropriate location\n     * in the diff viewer. The anchors on the page will be rebuilt. This will\n     * then trigger the loading of the next file.\n     *\n     * Args:\n     *     diffReviewable (RB.DiffReviewable):\n     *         The diff reviewable for loading and reviewing the diff.\n     *\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     * Option Args:\n     *     showDeleted (boolean):\n     *         Determines whether or not we want to requeue the corresponding\n     *         diff in order to show its deleted content.\n     */\n    queueLoadDiff(diffReviewable, options={}) {\n        $.funcQueue('diff_files').add(async () => {\n            const fileDiffID = diffReviewable.get('fileDiffID');\n\n            if (!options.showDeleted && $(`#file${fileDiffID}`).length === 1) {\n                /*\n                 * We already have this diff (probably pre-loaded), and we\n                 * don't want to requeue it to show its deleted content.\n                 */\n                this._renderFileDiff(diffReviewable);\n            } else {\n                /*\n                 * We either want to queue this diff for the first time, or we\n                 * want to requeue it to show its deleted content.\n                 */\n                const prefix = (options.showDeleted\n                                ? '#file'\n                                : '#file_container_');\n\n                const html = await diffReviewable.getRenderedDiff(options);\n                const $container = $(prefix + fileDiffID)\n                    .parent();\n\n                if ($container.length === 0) {\n                    /*\n                     * The revision or page may have changed. There's\n                     * no element to work with. Just ignore this and\n                     * move on to the next.\n                     */\n                    return;\n                }\n\n                $container.hide();\n\n                /*\n                 * jQuery's html() and replaceWith() perform checks of\n                 * the HTML, looking for things like <script> tags to\n                 * determine how best to set the HTML, and possibly\n                 * manipulating the string to do some normalization of\n                 * for cases we don't need to worry about. While this\n                 * is all fine for most HTML fragments, this can be\n                 * slow for diffs, given their size, and is\n                 * unnecessary. It's much faster to just set innerHTML\n                 * directly.\n                 */\n                $container[0].innerHTML = html;\n                this._renderFileDiff(diffReviewable);\n            }\n        });\n    },\n\n    /**\n     * Set up a diff as DiffReviewableView and renders it.\n     *\n     * This will set up a :js:class:`RB.DiffReviewableView` for the given\n     * diffReviewable. The anchors from this diff render will be stored for\n     * navigation.\n     *\n     * Once rendered and set up, the next diff in the load queue will be\n     * pulled from the server.\n     *\n     * Args:\n     *     diffReviewable (RB.DiffReviewable):\n     *         The reviewable diff to render.\n     */\n    _renderFileDiff(diffReviewable) {\n        const elementName = 'file' + diffReviewable.get('fileDiffID');\n        const $el = $(`#${elementName}`);\n\n        if ($el.length === 0) {\n            /*\n             * The user changed revisions before the file finished loading, and\n             * the target element no longer exists. Just return.\n             */\n            $.funcQueue('diff_files').next();\n            return;\n        }\n\n        const diffReviewableView = new RB.DiffReviewableView({\n            el: $el,\n            model: diffReviewable,\n        });\n\n        this._diffFileIndexView.addDiff(this._diffReviewableViews.length,\n                                        diffReviewableView);\n\n        this._diffReviewableViews.push(diffReviewableView);\n        diffReviewableView.render();\n        diffReviewableView.$el.parent().show();\n\n        this.listenTo(diffReviewableView, 'fileClicked', () => {\n            this.selectAnchorByName(diffReviewable.get('file').get('index'));\n        });\n\n        this.listenTo(diffReviewableView, 'chunkClicked', name => {\n            this.selectAnchorByName(name, false);\n        });\n\n        this.listenTo(diffReviewableView, 'moveFlagClicked', line => {\n            this.selectAnchor(this.$(`a[target=${line}]`));\n        });\n\n        /* We must rebuild this every time. */\n        this._updateAnchors(diffReviewableView.$el);\n\n        this.listenTo(diffReviewableView, 'chunkExpansionChanged', () => {\n            /* The selection rectangle may not update -- bug #1353. */\n            this._highlightAnchor(\n                $(this._$anchors[this._selectedAnchorIndex]));\n        });\n\n        if (this._startAtAnchorName) {\n            /* See if we've loaded the anchor the user wants to start at. */\n            let $anchor =\n                $(document.getElementsByName(this._startAtAnchorName));\n\n            /*\n             * Some anchors are added by the template (such as those at\n             * comment locations), but not all are. If the anchor isn't found,\n             * but the URL hash is indicating that we want to start at a\n             * location within this file, add the anchor.\n             * */\n            const urlSplit = this._startAtAnchorName.split(',');\n\n            if ($anchor.length === 0 &&\n                urlSplit.length === 2 &&\n                elementName === urlSplit[0]) {\n                $anchor = $(this.anchorTemplate({\n                    anchorName: this._startAtAnchorName,\n                }));\n\n                diffReviewableView.$el\n                    .find(`tr[line='${urlSplit[1]}']`)\n                        .addClass('highlight-anchor')\n                        .append($anchor);\n            }\n\n            if ($anchor.length !== 0) {\n                this.selectAnchor($anchor);\n                this._startAtAnchorName = null;\n            }\n        }\n\n        this.listenTo(diffReviewableView, 'showDeletedClicked', () => {\n            this.queueLoadDiff(diffReviewable, {showDeleted: true});\n            $.funcQueue('diff_files').start();\n        });\n\n        $.funcQueue('diff_files').next();\n    },\n\n    /**\n     * Select the anchor at a specified location.\n     *\n     * By default, this will scroll the page to position the anchor near\n     * the top of the view.\n     *\n     * Args:\n     *     $anchor (jQuery):\n     *         The anchor to select.\n     *\n     *     scroll (boolean, optional):\n     *         Whether to scroll the page to the anchor. This defaults to\n     *         ``true``.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the anchor was found and selected. ``false`` if not\n     *     found.\n     */\n    selectAnchor($anchor, scroll) {\n        if (!$anchor || $anchor.length === 0 ||\n            $anchor.parent().is(':hidden')) {\n            return false;\n        }\n\n        if (scroll !== false) {\n            this._navigate({\n                anchor: $anchor.attr('name'),\n                updateURLOnly: true,\n            });\n\n            let scrollAmount = this.DIFF_SCROLLDOWN_AMOUNT;\n\n            if (RB.DraftReviewBannerView.instance) {\n                scrollAmount += RB.DraftReviewBannerView.instance.getHeight();\n            }\n\n            this._$window.scrollTop($anchor.offset().top - scrollAmount);\n        }\n\n        this._highlightAnchor($anchor);\n\n        for (let i = 0; i < this._$anchors.length; i++) {\n            if (this._$anchors[i] === $anchor[0]) {\n                this._selectedAnchorIndex = i;\n                break;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Select an anchor by name.\n     *\n     * Args:\n     *     name (string):\n     *         The name of the anchor.\n     *\n     *     scroll (boolean, optional):\n     *         Whether to scroll the page to the anchor. This defaults to\n     *         ``true``.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the anchor was found and selected. ``false`` if not\n     *     found.\n     */\n    selectAnchorByName(name, scroll) {\n        return this.selectAnchor($(document.getElementsByName(name)), scroll);\n    },\n\n    /**\n     * Highlight a chunk bound to an anchor element.\n     *\n     * Args:\n     *     $anchor (jQuery):\n     *         The anchor to highlight.\n     */\n    _highlightAnchor($anchor) {\n        this._highlightedChunk =\n            $anchor.closest('tbody')\n            .add($anchor.closest('thead'));\n        this._chunkHighlighter.highlight(this._highlightedChunk);\n    },\n\n    /**\n     * Update the list of known anchors.\n     *\n     * This will update the list of known anchors based on all named anchors\n     * in the specified table. This is called after every part of the diff\n     * that is loaded.\n     *\n     * If no anchor is selected, this will try to select the first one.\n     *\n     * Args:\n     *     $table (jQuery):\n     *         The table containing anchors.\n     */\n    _updateAnchors($table) {\n        this._$anchors = this._$anchors.add($table.find('th a[name]'));\n\n        /* Skip over the change index to the first item. */\n        if (this._selectedAnchorIndex === -1 && this._$anchors.length > 0) {\n            this._selectedAnchorIndex = 0;\n            this._highlightAnchor(\n                $(this._$anchors[this._selectedAnchorIndex]));\n        }\n    },\n\n    /**\n     * Return the next navigatable anchor.\n     *\n     * This will take a direction to search, starting at the currently\n     * selected anchor. The next anchor matching one of the types in the\n     * anchorTypes bitmask will be returned. If no anchor is found,\n     * null will be returned.\n     *\n     * Args:\n     *     dir (number):\n     *         The direction to navigate in. This should be\n     *         :js:data:`SCROLL_BACKWARD` or js:data:`SCROLL_FORWARD`.\n     *\n     *     anchorTypes (number):\n     *         A bitmask of types to consider when searching for the next\n     *         anchor.\n     *\n     * Returns:\n     *     jQuery:\n     *     The anchor, if found. If an anchor was not found, ``null`` is\n     *     returned.\n     */\n    _getNextAnchor(dir, anchorTypes) {\n        for (let i = this._selectedAnchorIndex + dir;\n             i >= 0 && i < this._$anchors.length;\n             i += dir) {\n            const $anchor = $(this._$anchors[i]);\n\n            if ($anchor.closest('tr').hasClass('dimmed')) {\n                continue;\n            }\n\n            if (((anchorTypes & this.ANCHOR_COMMENT) &&\n                 $anchor.hasClass('commentflag-anchor')) ||\n                ((anchorTypes & this.ANCHOR_FILE) &&\n                 $anchor.hasClass('file-anchor')) ||\n                ((anchorTypes & this.ANCHOR_CHUNK) &&\n                 $anchor.hasClass('chunk-anchor'))) {\n                return $anchor;\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Select the previous file's header on the page.\n     */\n    _selectPreviousFile() {\n        this.selectAnchor(this._getNextAnchor(this.SCROLL_BACKWARD,\n                                              this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the next file's header on the page.\n     */\n    _selectNextFile() {\n        this.selectAnchor(this._getNextAnchor(this.SCROLL_FORWARD,\n                                              this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the previous diff chunk on the page.\n     */\n    _selectPreviousDiff() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_BACKWARD,\n                                this.ANCHOR_CHUNK | this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the next diff chunk on the page.\n     */\n    _selectNextDiff() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_FORWARD,\n                                this.ANCHOR_CHUNK | this.ANCHOR_FILE));\n    },\n\n    /**\n     * Select the previous comment on the page.\n     */\n    _selectPreviousComment() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_BACKWARD, this.ANCHOR_COMMENT));\n    },\n\n    /**\n     * Select the next comment on the page.\n     */\n    _selectNextComment() {\n        this.selectAnchor(\n            this._getNextAnchor(this.SCROLL_FORWARD, this.ANCHOR_COMMENT));\n    },\n\n    /**\n     * Re-center the currently selected area on the page.\n     */\n    _recenterSelected() {\n        this.selectAnchor($(this._$anchors[this._selectedAnchorIndex]));\n    },\n\n   /**\n    * Create a comment for a chunk of a diff\n    */\n    _createComment() {\n        const chunkID = this._highlightedChunk[0].id;\n        const chunkElement = document.getElementById(chunkID);\n\n        if (chunkElement) {\n            const lineElements = chunkElement.getElementsByTagName('tr');\n            const beginLineNum = lineElements[0].getAttribute('line');\n            const beginNode = lineElements[0].cells[2];\n            const endLineNum = lineElements[lineElements.length - 1]\n                .getAttribute('line');\n            const endNode = lineElements[lineElements.length - 1].cells[2];\n\n            this._diffReviewableViews.forEach(diffReviewableView => {\n                if ($.contains(diffReviewableView.el, beginNode)){\n                    diffReviewableView.createComment(beginLineNum, endLineNum,\n                                                     beginNode, endNode);\n                }\n            });\n        }\n    },\n\n    /**\n     * Toggle the display of diff chunks that only contain whitespace changes.\n     *\n     * Returns:\n     *     boolean:\n     *     ``false``, to prevent events from bubbling up.\n     */\n    _toggleWhitespaceOnlyChunks() {\n        this._diffReviewableViews.forEach(\n            view => view.toggleWhitespaceOnlyChunks());\n\n        this._$controls.find('.ws').toggle();\n\n        return false;\n    },\n\n    /**\n     * Toggle the display of extra whitespace highlights on diffs.\n     *\n     * A cookie will be set to the new whitespace display setting, so that\n     * the new option will be the default when viewing diffs.\n     *\n     * Returns:\n     *     boolean:\n     *     ``false``, to prevent events from bubbling up.\n     */\n    _toggleShowExtraWhitespace() {\n        this._$controls.find('.ew').toggle();\n        RB.UserSession.instance.toggleAttr('diffsShowExtraWhitespace');\n\n        return false;\n    },\n\n    /**\n     * Set the initial URL for the page.\n     *\n     * This accomplishes two things:\n     *\n     * 1. The user may have viewed ``diff/``, and not ``diff/<revision>/``,\n     *    but we want to always show the revision in the URL. This ensures\n     *    we have a URL equivalent to the one we get when clicking a revision\n     *    in the slider.\n     *\n     * 2. We want to add back any hash and query string that may have been\n     *    stripped away, so the URL doesn't appear to suddenly change from\n     *    what the user expected.\n     *\n     * This won't invoke any routes or store any new history. The back button\n     * will correctly bring the user to the previous page.\n     *\n     * Args:\n     *     queryString (string):\n     *         The query string provided in the URL.\n     *\n     *     anchor (string):\n     *         The anchor provided in the URL.\n     */\n    _setInitialURL(queryString, anchor) {\n        this._startAtAnchorName = anchor || null;\n\n        this._navigate({\n            queryString: queryString,\n            anchor: anchor,\n            updateURLOnly: true,\n        });\n    },\n\n    /**\n     * Navigate to a new page state by calculating and setting a URL.\n     *\n     * This builds a URL consisting of the revision range and any other\n     * state that impacts the view of the page (page number and filtered list\n     * of filename patterns), updating the current location in the browser and\n     * (by default) triggering a route change.\n     *\n     * Args:\n     *     options (object):\n     *         The options for the navigation.\n     *\n     * Option Args:\n     *     revision (number, optional):\n     *         The revision (or first part of an interdiff range) to view.\n     *         Defaults to the current revision.\n     *\n     *     interdiffRevision (number, optional):\n     *         The second revision of an interdiff range to view.\n     *         Defaults to the current revision for the interdiff, if any.\n     *\n     *     page (number, optional):\n     *         A page number to specify. If not provided, and if the revision\n     *         range has not changed, the existing value (or lack of one)\n     *         in the URL will be used. If the revision range has changed and\n     *         a value was not explicitly provided, a ``page=`` will not be\n     *         added to the URL.\n     *\n     *     anchor (string, optional):\n     *         An anchor name to navigate to. This cannot begin with ``#``.\n     *\n     *     queryString (string, optional):\n     *         An explicit query string to use for the URL. If specified,\n     *         a query string will not be computed. This must begin with ``?``.\n     *\n     *     updateURLOnly (boolean, optional):\n     *         If ``true``, the location in the browser will be updated, but\n     *         a route will not be triggered.\n     *\n     *     baseCommitID (string, optional):\n     *         The ID of the base commit to use in the request.\n     *\n     *     tipCommitID (string, optional):\n     *         The ID of the top commit to use in the request.\n     */\n    _navigate(options) {\n        const curRevision = this.model.revision.get('revision');\n        const curInterdiffRevision =\n            this.model.revision.get('interdiffRevision');\n\n        /* Start the URL off with the revision range. */\n        const revision = (options.revision !== undefined\n                          ? options.revision\n                          : curRevision);\n        const interdiffRevision = (options.interdiffRevision !== undefined\n                                   ? options.interdiffRevision\n                                   : curInterdiffRevision);\n\n        let baseURL = revision;\n\n        if (interdiffRevision) {\n            baseURL += `-${interdiffRevision}`;\n        }\n\n        baseURL += '/';\n\n        /*\n         * If an explicit query string is provided, we'll just use that.\n         * Otherwise, we'll generate one.\n         */\n        let queryData = options.queryString;\n\n        if (queryData === undefined) {\n            /*\n            * We'll build as an array to maintain a specific order, which\n            * helps with caching and testing.\n            */\n            queryData = [];\n\n            /*\n             * We want to be smart about when we include ?page=. We always\n             * include it if it's explicitly specified in options. If it's\n             * not, then we'll fall back to what's currently in the URL, but\n             * only if the revision range is staying the same, otherwise we're\n             * taking it out. This simulates the behavior we've always had.\n             */\n            let page = options.page;\n\n            if (page === undefined &&\n                revision === curRevision &&\n                interdiffRevision === curInterdiffRevision) {\n                /*\n                 * It's the same, so we can plug in the page from the\n                 * current URL.\n                 */\n                page = this.model.pagination.get('currentPage');\n            }\n\n            if (page && page !== 1) {\n                queryData.push({\n                    name: 'page',\n                    value: page,\n                });\n            }\n\n            if (options.baseCommitID) {\n                queryData.push({\n                    name: 'base-commit-id',\n                    value: options.baseCommitID,\n                });\n            }\n\n            if (options.tipCommitID) {\n                queryData.push({\n                    name: 'tip-commit-id',\n                    value: options.tipCommitID,\n                });\n            }\n\n            const filenamePatterns = this.model.get('filenamePatterns');\n\n            if (filenamePatterns && filenamePatterns.length > 0) {\n                queryData.push({\n                    name: 'filenames',\n                    value: filenamePatterns,\n                });\n            }\n        }\n\n        const url = Djblets.buildURL({\n            baseURL: baseURL,\n            queryData: queryData,\n            anchor: options.anchor,\n        });\n\n        /*\n         * Determine if we're performing the navigation or just updating the\n         * displayed URL.\n         */\n        let navOptions;\n\n        if (options.updateURLOnly) {\n            navOptions = {\n                replace: true,\n                trigger: false,\n            };\n        } else {\n            navOptions = {\n                trigger: true,\n            };\n        }\n\n        this.router.navigate(url, navOptions);\n    },\n\n    /**\n     * Handler for when a RB.DiffReviewable is added.\n     *\n     * This will add a placeholder entry for the file and queue the diff\n     * for loading/rendering.\n     *\n     * Args:\n     *     diffReviewable (RB.DiffReviewable):\n     *         The DiffReviewable that was added.\n     */\n    _onDiffReviewableAdded(diffReviewable) {\n        const file = diffReviewable.get('file');\n\n        this._$diffs.append(this._fileEntryTemplate({\n            id: file.id,\n            newFile: file.get('isnew'),\n            filename: file.get('depotFilename'),\n        }));\n\n        this.queueLoadDiff(diffReviewable);\n    },\n\n    /**\n     * Handler for when the window resizes.\n     *\n     * Triggers a relayout of all the diffs and the chunk highlighter.\n     */\n    _onWindowResize() {\n        for (let i = 0; i < this._diffReviewableViews.length; i++) {\n            this._diffReviewableViews[i].updateLayout();\n        }\n\n        this._chunkHighlighter.updateLayout();\n    },\n\n    /**\n     * Callback for when a new revision is selected.\n     *\n     * This supports both single revisions and interdiffs. If `base` is 0, a\n     * single revision is selected. If not, the interdiff between `base` and\n     * `tip` will be shown.\n     *\n     * This will always implicitly navigate to page 1 of any paginated diffs.\n     */\n    _onRevisionSelected(revisions) {\n        let base = revisions[0];\n        let tip = revisions[1];\n\n        if (base === 0) {\n            /* This is a single revision, not an interdiff. */\n            base = tip;\n            tip = null;\n        }\n\n        this._navigate({\n            revision: base,\n            interdiffRevision: tip,\n        });\n    },\n\n    /**\n     * Callback for when a new page is selected.\n     *\n     * Navigates to the same revision with a different page number.\n     *\n     * Args:\n     *     scroll (boolean):\n     *         Whether to scroll to the file index.\n     *\n     *     page (number):\n     *         The page number to navigate to.\n     */\n    _onPageSelected(scroll, page) {\n        if (scroll) {\n            this.selectAnchorByName('index_header', true);\n        }\n\n        this._navigate({\n            page: page,\n        });\n    },\n\n    /**\n     * Handle the selected commit interval changing.\n     *\n     * This will navigate to a diff with the selected base and tip commit IDs.\n     *\n     * Args:\n     *     model (RB.DiffCommitList):\n     *          The model that changed.\n     */\n    _onCommitIntervalChanged(model) {\n        this._navigate({\n            baseCommitID: model.get('baseCommitID'),\n            tipCommitID: model.get('tipCommitID'),\n        });\n    },\n});\n_.extend(RB.DiffViewerPageView.prototype, RB.KeyBindingsMixin);\n"],"mappings":"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"}